{"pageProps":{"article":{"type_of":"article","id":575456,"title":"How to Embed Your Dev.to Blog in Your Personal Website","description":"I recently switched my blog over from Medium to DEV, one of the primary reasons being I wanted an eas...","readable_publish_date":"Jan 18","slug":"how-to-embed-your-dev-to-blog-in-your-personal-website-4l81","path":"/matjones/how-to-embed-your-dev-to-blog-in-your-personal-website-4l81","url":"https://dev.to/matjones/how-to-embed-your-dev-to-blog-in-your-personal-website-4l81","comments_count":1,"public_reactions_count":43,"collection_id":null,"published_timestamp":"2021-01-18T21:57:36Z","positive_reactions_count":43,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--vvHcev7p--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/954otlp8dcw90j5ftkje.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--kDcxAqes--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/954otlp8dcw90j5ftkje.png","canonical_url":"https://dev.to/matjones/how-to-embed-your-dev-to-blog-in-your-personal-website-4l81","created_at":"2021-01-18T21:57:36Z","edited_at":"2021-01-19T16:39:05Z","crossposted_at":null,"published_at":"2021-01-18T21:57:36Z","last_comment_at":"2021-01-25T15:05:38Z","tag_list":"blog, typescript, javascript, portfolio","tags":["blog","typescript","javascript","portfolio"],"body_html":"<p>I recently switched my blog over from Medium to DEV, one of the primary reasons being I wanted an easy way to show my full blog on my personal website, as well as on the platform I'm using.</p>\n\n<p>In Medium's desperate quest for monetization, they've made it extremely difficult to embed your blog on your own website. There are several projects out there on GitHub that attempt to help do this, but none of them seem to work very well, and they're all somewhat lacking in the styles department.</p>\n\n<p>DEV has an open API, making it much easier to embed your blog in your own website, with full custom markup and styles, so you can easily make it look exactly how you want. In this article, we'll take a look at just how easy this is to get set up.</p>\n\n<p>We're going to be using TypeScript, but if you're not familiar with it or just aren't using it, you should still be able to follow along, just excluding the TypeScript interfaces.</p>\n\n<h1>\n  <a name=\"api\" href=\"#api\" class=\"anchor\">\n  </a>\n  API\n</h1>\n\n<p>I'm going to be using <a href=\"https://github.com/visionmedia/superagent\">Superagent</a> as my HTTP client, because I like the functional and declarative API, but you can easily swap this out for something else like Axios, or the browser Fetch API. The full API documentation for DEV can be found <a href=\"https://docs.dev.to/api/\">here</a>.</p>\n\n<p>Let's start by setting up some interfaces to type our responses with (if you're using vanilla JavaScript you can skip this step).</p>\n\n<p><code>dev-to-article-meta.ts</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kr\">interface</span> <span class=\"nx\">DevToArticleMeta</span> <span class=\"p\">{</span>\n  <span class=\"nl\">type_of</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">id</span><span class=\"p\">:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">title</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">description</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">readable_publish_date</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">slug</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">path</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">url</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">comments_count</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">public_reactions_count</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">collection_id</span><span class=\"p\">?:</span> <span class=\"kr\">number</span><span class=\"p\">;</span>\n  <span class=\"nl\">published_timestamp</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">positive_reactions_count</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">cover_image</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">social_image</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">tag_list</span><span class=\"p\">:</span> <span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"kr\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><code>dev-to-article.ts</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">DevToArticleMeta</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">interfaces/dev-to-article-meta</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kr\">interface</span> <span class=\"nx\">DevToArticle</span> <span class=\"kd\">extends</span> <span class=\"nx\">DevToArticleMeta</span> <span class=\"p\">{</span>\n  <span class=\"nl\">body_html</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n  <span class=\"nl\">body_markdown</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Now let's set up a service to handle fetching our data. We'll need two methods:</p>\n\n<ul>\n<li><code>async fetchArticles(): Promise&lt;Array&lt;DevToArticleMeta&gt;&gt;</code></li>\n<li><code>async getArticle(slug: string): Promise&lt;DevToArticle&gt;</code></li>\n</ul>\n\n<p><code>dev-to-service.ts</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">DevToArticle</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">interfaces/dev-to-article</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">DevToArticleMeta</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">interfaces/dev-to-article-meta</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"nx\">superagent</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">superagent</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// setup API endpoints and queries</span>\n<span class=\"kd\">const</span> <span class=\"nx\">DEV_TO_USERNAME</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">matjones</span><span class=\"dl\">\"</span><span class=\"p\">;</span> <span class=\"c1\">// swap this for your username</span>\n<span class=\"kd\">const</span> <span class=\"nx\">ARTICLES_API</span> <span class=\"o\">=</span> <span class=\"dl\">\"</span><span class=\"s2\">https://dev.to/api/articles</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// helper method to type responses</span>\n<span class=\"kd\">const</span> <span class=\"nx\">parseResponse</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">):</span> <span class=\"nx\">T</span> <span class=\"o\">=&gt;</span>\n  <span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">response</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">string</span><span class=\"dl\">\"</span> <span class=\"p\">?</span> <span class=\"nx\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">:</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"nx\">T</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">fetchArticles</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// GET the endpoint</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">superagent</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">ARTICLES_API</span><span class=\"p\">)</span>\n          <span class=\"c1\">// and add the username query parameter</span>\n          <span class=\"p\">.</span><span class=\"nx\">query</span><span class=\"p\">({</span> <span class=\"na\">username</span><span class=\"p\">:</span> <span class=\"nx\">DEV_TO_USERNAME</span> <span class=\"p\">});</span>\n  <span class=\"k\">return</span> <span class=\"nx\">parseResponse</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">getArticle</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">slug</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// build the API endpoint URL, `slug` is the `slug`</span>\n  <span class=\"c1\">//property of one of your articles,</span>\n  <span class=\"c1\">// e.g. \"protecting-your-privacy-online-3bmc\"</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">endpoint</span> <span class=\"o\">=</span> <span class=\"s2\">`</span><span class=\"p\">${</span><span class=\"nx\">ARTICLES_API</span><span class=\"p\">}</span><span class=\"s2\">/</span><span class=\"p\">${</span><span class=\"nx\">DEV_TO_USERNAME</span><span class=\"p\">}</span><span class=\"s2\">/</span><span class=\"p\">${</span><span class=\"nx\">slug</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">;</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">superagent</span><span class=\"p\">.</span><span class=\"kd\">get</span><span class=\"p\">(</span><span class=\"nx\">endpoint</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"nx\">parseResponse</span><span class=\"o\">&lt;</span><span class=\"nx\">DevToArticle</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">DevToService</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">fetchArticles</span><span class=\"p\">,</span>\n  <span class=\"nx\">getArticle</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>And that's pretty much it for our API layer. Nice and simple. 😎</p>\n\n<p>The <code>fetchArticles()</code> function will fetch all of your published articles. If you want to implement pagination or a maximum number of results, you can add the <a href=\"https://docs.dev.to/api/#operation/getArticles\"><code>page</code> and <code>per_page</code> query parameters</a> via the <code>.query()</code> method chained off of <code>superagent.get()</code>.</p>\n\n<h1>\n  <a name=\"integrating-into-a-react-app\" href=\"#integrating-into-a-react-app\" class=\"anchor\">\n  </a>\n  Integrating Into a React App\n</h1>\n\n<p>While this is technically all you need to get the data needed to render your articles, we can make it a little easier to work with in a React app by adding some <a href=\"https://reactjs.org/docs/hooks-custom.html\">custom React hooks</a>.</p>\n\n<p><strong>STOP: If you're not familiar with React hooks, <a href=\"https://reactjs.org/docs/hooks-intro.html\">go read up on hooks first</a>, then come back. I'll wait.</strong></p>\n\n<p>We'll make a really simple hook for each of our service methods. Since <code>useEffect</code> callbacks can't be <code>async</code> themselves, we're going to be using an <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/IIFE\">IIFE</a>, but note that you could also use the trusty old <code>Promise.then()</code> syntax as well.</p>\n\n<p><code>use-dev-to-articles.ts</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">DevToArticleMeta</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">interfaces/dev-to-article-meta</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useEffect</span><span class=\"p\">,</span> <span class=\"nx\">useState</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">DevToService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">utils/dev-to-service</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n* Fetch all of my published dev.to articles\n* @param onError a callback which is invoked if the request fails\n*/</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">useDevToArticles</span><span class=\"p\">(</span><span class=\"nx\">onError</span><span class=\"p\">?:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">loading</span><span class=\"p\">,</span> <span class=\"nx\">setLoading</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">articles</span><span class=\"p\">,</span> <span class=\"nx\">setArticles</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">DevToArticleMeta</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">([]);</span>\n\n  <span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"nx\">setArticles</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">DevToService</span><span class=\"p\">.</span><span class=\"nx\">fetchArticles</span><span class=\"p\">());</span>\n      <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onError</span><span class=\"p\">?.();</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"nx\">setLoading</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"p\">})();</span>\n  <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">onError</span><span class=\"p\">]);</span>\n\n  <span class=\"c1\">// return the array of articles, and the loading indicator</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">articles</span><span class=\"p\">,</span> <span class=\"nx\">loading</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p><code>use-dev-to-article.ts</code><br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">DevToArticle</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">interfaces/dev-to-article</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">useState</span><span class=\"p\">,</span> <span class=\"nx\">useEffect</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">react</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span> <span class=\"p\">{</span> <span class=\"nx\">DevToService</span> <span class=\"p\">}</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">utils/dev-to-service</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n* Get a specific article given the article's slug.\n* @param slug the slug of the article to retrieve.\n* @param onError a callback which is invoked if the request fails\n*/</span>\n<span class=\"k\">export</span> <span class=\"k\">default</span> <span class=\"kd\">function</span> <span class=\"nx\">useDevToArticle</span><span class=\"p\">(</span><span class=\"nx\">slug</span><span class=\"p\">:</span> <span class=\"kr\">string</span><span class=\"p\">,</span> <span class=\"nx\">onError</span><span class=\"p\">?:</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">loading</span><span class=\"p\">,</span> <span class=\"nx\">setLoading</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">article</span><span class=\"p\">,</span> <span class=\"nx\">setArticle</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nx\">DevToArticle</span><span class=\"o\">&gt;</span><span class=\"p\">();</span>\n\n  <span class=\"nx\">useEffect</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// this bit may not be necessary for you; I needed</span>\n    <span class=\"c1\">// it because I'm using Next.js server side rendering</span>\n    <span class=\"c1\">// so slug is `undefined` on the initial render</span>\n    <span class=\"c1\">// since I'm getting it from a route parameter</span>\n    <span class=\"c1\">// e.g. /blog/:slug</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">slug</span> <span class=\"o\">==</span> <span class=\"kc\">null</span> <span class=\"o\">||</span> <span class=\"nx\">slug</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">===</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">return</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"k\">try</span> <span class=\"p\">{</span>\n        <span class=\"nx\">setArticle</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"nx\">DevToService</span><span class=\"p\">.</span><span class=\"nx\">getArticle</span><span class=\"p\">(</span><span class=\"nx\">slug</span><span class=\"p\">));</span>\n      <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">onError</span><span class=\"p\">?.();</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"nx\">setLoading</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n    <span class=\"p\">})();</span>\n  <span class=\"p\">},</span> <span class=\"p\">[</span><span class=\"nx\">onError</span><span class=\"p\">,</span> <span class=\"nx\">slug</span><span class=\"p\">]);</span>\n  <span class=\"c1\">// return the article, and the loading indicator</span>\n  <span class=\"k\">return</span> <span class=\"p\">{</span> <span class=\"nx\">article</span><span class=\"p\">,</span> <span class=\"nx\">loading</span> <span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<h2>\n  <a name=\"rendering-an-articles-body\" href=\"#rendering-an-articles-body\" class=\"anchor\">\n  </a>\n  Rendering an Article's Body\n</h2>\n\n<p>There are two ways you can render an article's body; using the <code>body_html</code> property or the <code>body_markdown</code> property. If your article does not contain any HTML elements (you're only using Markdown) and does not contain any DEV <a href=\"https://docs.dev.to/frontend/liquid-tags/\">Liquid tags</a>, you can use the <code>body_markdown</code> property and use something like <a href=\"https://github.com/remarkjs/react-markdown\"><code>react-markdown</code></a> to render it.</p>\n\n<p>However, if you're using Liquid tags, or you have HTML elements in your markdown (for example, I often use the <code>&lt;figcaption&gt;</code> element to add captions to images and code snippets), you'll need to render the <code>body_html</code> property. In React, this can be done like this:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight tsx\"><code><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">dangerouslySetInnerHTML</span><span class=\"p\">=</span><span class=\"si\">{</span><span class=\"p\">{</span> <span class=\"na\">__html</span><span class=\"p\">:</span> <span class=\"nx\">article</span><span class=\"p\">.</span><span class=\"nx\">body_html</span> <span class=\"p\">}</span><span class=\"si\">}</span><span class=\"p\">/&gt;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>Notice the <code>dangerouslySetInnerHTML</code> syntax; it is <em>intentionally</em> ugly to look at and difficult to type quickly, because doing this could potentially open your app to cross-site-scripting vulnerabilities. In general, you should only use <code>dangerouslySetInnerHTML</code> with trusted inputs (e.g. inputs that you control, not unknown end users).</p>\n\n<h1>\n  <a name=\"results\" href=\"#results\" class=\"anchor\">\n  </a>\n  Results\n</h1>\n\n<p>Using this approach, I was able to easily embed my DEV blog into my personal website. Clicking the comment or thumbs up icon opens the article on dev.to so that you can add reactions or comments.</p>\n\n<figure><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xboxT5bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mmx1dqqz4ow3k9ayj7av.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--xboxT5bn--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/mmx1dqqz4ow3k9ayj7av.png\" alt=\"Blog index page on my personal site\" loading=\"lazy\"></a></p>\n<figcaption>The /blog page on my personal website.</figcaption></figure>\n\n\n\n<figure><p><a href=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Jz7Nv6b8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ooiwuhddje71w0jpoxl.png\" class=\"article-body-image-wrapper\"><img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--Jz7Nv6b8--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://dev-to-uploads.s3.amazonaws.com/i/4ooiwuhddje71w0jpoxl.png\" alt=\"Blog article page on my personal site\" loading=\"lazy\"></a></p>\n<figcaption>A specific blog article on my personal website.</figcaption></figure>\n\n\n\n","body_markdown":"I recently switched my blog over from Medium to DEV, one of the primary reasons being I wanted an easy way to show my full blog on my personal website, as well as on the platform I'm using.\n\nIn Medium's desperate quest for monetization, they've made it extremely difficult to embed your blog on your own website. There are several projects out there on GitHub that attempt to help do this, but none of them seem to work very well, and they're all somewhat lacking in the styles department.\n\nDEV has an open API, making it much easier to embed your blog in your own website, with full custom markup and styles, so you can easily make it look exactly how you want. In this article, we'll take a look at just how easy this is to get set up.\n\nWe're going to be using TypeScript, but if you're not familiar with it or just aren't using it, you should still be able to follow along, just excluding the TypeScript interfaces.\n\n# API\n\nI'm going to be using [Superagent](https://github.com/visionmedia/superagent) as my HTTP client, because I like the functional and declarative API, but you can easily swap this out for something else like Axios, or the browser Fetch API. The full API documentation for DEV can be found [here](https://docs.dev.to/api/).\n\nLet's start by setting up some interfaces to type our responses with (if you're using vanilla JavaScript you can skip this step).\n\n`dev-to-article-meta.ts`\n```ts\nexport default interface DevToArticleMeta {\n  type_of: string;\n  id: number;\n  title: string;\n  description: string;\n  readable_publish_date: string;\n  slug: string;\n  path: string;\n  url: string;\n  comments_count: string;\n  public_reactions_count: string;\n  collection_id?: number;\n  published_timestamp: string;\n  positive_reactions_count: string;\n  cover_image: string;\n  social_image: string;\n  tag_list: Array<string>;\n}\n```\n\n`dev-to-article.ts`\n```ts\nimport DevToArticleMeta from \"interfaces/dev-to-article-meta\";\n\nexport default interface DevToArticle extends DevToArticleMeta {\n  body_html: string;\n  body_markdown: string;\n}\n```\n\nNow let's set up a service to handle fetching our data. We'll need two methods:\n- `async fetchArticles(): Promise<Array<DevToArticleMeta>>`\n- `async getArticle(slug: string): Promise<DevToArticle>`\n\n`dev-to-service.ts`\n```ts\nimport DevToArticle from \"interfaces/dev-to-article\";\nimport DevToArticleMeta from \"interfaces/dev-to-article-meta\";\nimport superagent from \"superagent\";\n\n// setup API endpoints and queries\nconst DEV_TO_USERNAME = \"matjones\"; // swap this for your username\nconst ARTICLES_API = \"https://dev.to/api/articles\";\n\n// helper method to type responses\nconst parseResponse = <T>(response: any): T =>\n  (typeof response === \"string\" ? JSON.parse(response) : response) as T;\n\nconst fetchArticles = async () => {\n  // GET the endpoint\n  const response = await superagent.get(ARTICLES_API)\n          // and add the username query parameter\n          .query({ username: DEV_TO_USERNAME });\n  return parseResponse(response.body);\n};\n\nconst getArticle = async (slug: string) => {\n  // build the API endpoint URL, `slug` is the `slug`\n  //property of one of your articles,\n  // e.g. \"protecting-your-privacy-online-3bmc\"\n  const endpoint = `${ARTICLES_API}/${DEV_TO_USERNAME}/${slug}`;\n  const response = await superagent.get(endpoint);\n  return parseResponse<DevToArticle>(response.body);\n};\n\nexport const DevToService = {\n  fetchArticles,\n  getArticle,\n};\n```\n\nAnd that's pretty much it for our API layer. Nice and simple. 😎\n\nThe `fetchArticles()` function will fetch all of your published articles. If you want to implement pagination or a maximum number of results, you can add the [`page` and `per_page` query parameters](https://docs.dev.to/api/#operation/getArticles) via the `.query()` method chained off of `superagent.get()`.\n\n# Integrating Into a React App\n\nWhile this is technically all you need to get the data needed to render your articles, we can make it a little easier to work with in a React app by adding some [custom React hooks](https://reactjs.org/docs/hooks-custom.html).\n\n**STOP: If you're not familiar with React hooks, [go read up on hooks first](https://reactjs.org/docs/hooks-intro.html), then come back. I'll wait.**\n\nWe'll make a really simple hook for each of our service methods. Since `useEffect` callbacks can't be `async` themselves, we're going to be using an [IIFE](https://developer.mozilla.org/en-US/docs/Glossary/IIFE), but note that you could also use the trusty old `Promise.then()` syntax as well.\n\n`use-dev-to-articles.ts`\n```ts\nimport DevToArticleMeta from \"interfaces/dev-to-article-meta\";\nimport { useEffect, useState } from \"react\";\nimport { DevToService } from \"utils/dev-to-service\";\n\n/**\n* Fetch all of my published dev.to articles\n* @param onError a callback which is invoked if the request fails\n*/\nexport default function useDevToArticles(onError?: () => void) {\n  const [loading, setLoading] = useState(true);\n  const [articles, setArticles] = useState<Array<DevToArticleMeta>>([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setArticles(await DevToService.fetchArticles());\n      } catch (e) {\n        onError?.();\n      }\n\n      setLoading(false);\n    })();\n  }, [onError]);\n\n  // return the array of articles, and the loading indicator\n  return { articles, loading };\n}\n```\n\n`use-dev-to-article.ts`\n```ts\nimport DevToArticle from \"interfaces/dev-to-article\";\nimport { useState, useEffect } from \"react\";\nimport { DevToService } from \"utils/dev-to-service\";\n\n/**\n* Get a specific article given the article's slug.\n* @param slug the slug of the article to retrieve.\n* @param onError a callback which is invoked if the request fails\n*/\nexport default function useDevToArticle(slug: string, onError?: () => void) {\n  const [loading, setLoading] = useState(true);\n  const [article, setArticle] = useState<DevToArticle>();\n\n  useEffect(() => {\n    // this bit may not be necessary for you; I needed\n    // it because I'm using Next.js server side rendering\n    // so slug is `undefined` on the initial render\n    // since I'm getting it from a route parameter\n    // e.g. /blog/:slug\n    if (slug == null || slug.length === 0) {\n      return;\n    }\n\n    (async () => {\n      try {\n        setArticle(await DevToService.getArticle(slug));\n      } catch (e) {\n        onError?.();\n      }\n\n      setLoading(false);\n    })();\n  }, [onError, slug]);\n  // return the article, and the loading indicator\n  return { article, loading };\n}\n```\n\n## Rendering an Article's Body\n\nThere are two ways you can render an article's body; using the `body_html` property or the `body_markdown` property. If your article does not contain any HTML elements (you're only using Markdown) and does not contain any DEV [Liquid tags](https://docs.dev.to/frontend/liquid-tags/), you can use the `body_markdown` property and use something like [`react-markdown`](https://github.com/remarkjs/react-markdown) to render it.\n\nHowever, if you're using Liquid tags, or you have HTML elements in your markdown (for example, I often use the `<figcaption>` element to add captions to images and code snippets), you'll need to render the `body_html` property. In React, this can be done like this:\n\n```tsx\n<div dangerouslySetInnerHTML={{ __html: article.body_html }}/>\n```\n\nNotice the `dangerouslySetInnerHTML` syntax; it is *intentionally* ugly to look at and difficult to type quickly, because doing this could potentially open your app to cross-site-scripting vulnerabilities. In general, you should only use `dangerouslySetInnerHTML` with trusted inputs (e.g. inputs that you control, not unknown end users).\n\n# Results\n\nUsing this approach, I was able to easily embed my DEV blog into my personal website. Clicking the comment or thumbs up icon opens the article on dev.to so that you can add reactions or comments.\n\n![Blog index page on my personal site](https://dev-to-uploads.s3.amazonaws.com/i/mmx1dqqz4ow3k9ayj7av.png)\n<figcaption>The /blog page on my personal website.</figcaption>\n\n![Blog article page on my personal site](https://dev-to-uploads.s3.amazonaws.com/i/4ooiwuhddje71w0jpoxl.png)\n<figcaption>A specific blog article on my personal website.</figcaption>","user":{"name":"Mat Jones","username":"matjones","twitter_username":null,"github_username":"mrjones2014","website_url":"https://mjones.network","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rzQaKEWl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--lIbHS3Lt--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png"}}},"__N_SSG":true}