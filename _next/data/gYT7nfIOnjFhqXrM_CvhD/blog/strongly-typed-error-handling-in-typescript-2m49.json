{"pageProps":{"article":{"type_of":"article","id":573392,"title":"Strongly Typed Error Handling in TypeScript","description":"TypeScript is a great language. TypeScript takes JavaScript and makes it actually good. If there’s on...","readable_publish_date":"Jan 16","slug":"strongly-typed-error-handling-in-typescript-2m49","path":"/matjones/strongly-typed-error-handling-in-typescript-2m49","url":"https://dev.to/matjones/strongly-typed-error-handling-in-typescript-2m49","comments_count":0,"public_reactions_count":1,"collection_id":null,"published_timestamp":"2021-01-16T14:42:46Z","positive_reactions_count":1,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--iaDSv-7K--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/fi12u6nldkfm4kesn07z.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--gIZ3ch1n--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/fi12u6nldkfm4kesn07z.png","canonical_url":"https://dev.to/matjones/strongly-typed-error-handling-in-typescript-2m49","created_at":"2021-01-16T14:42:46Z","edited_at":"2021-01-18T18:23:49Z","crossposted_at":null,"published_at":"2021-01-16T14:42:46Z","last_comment_at":"2021-01-16T14:42:46Z","tag_list":"typescript, javascript, design, programming","tags":["typescript","javascript","design","programming"],"body_html":"<p>TypeScript is a great language. TypeScript takes JavaScript and makes it <em>actually good.</em> If there’s one glaring weakness, it’s the <a href=\"https://github.com/Microsoft/TypeScript/issues/8677\">inability to use strongly typed catch blocks</a>. However, this is mostly due to a design flaw in the JavaScript language; in JavaScript, you can <code>throw</code> <em>anything</em>, not just <code>Error</code> types.</p>\n\n<h1>\n  <a name=\"a-note-before-we-start\" href=\"#a-note-before-we-start\" class=\"anchor\">\n  </a>\n  A Note Before We Start\n</h1>\n\n<p>While I used some packages from the <code>AndcultureCode</code> GitHub organization, it just made this proof-of-concept easier to demonstrate. This same pattern could be easily applied without using any of these packages, and could be tied in with whatever existing infrastructure you have set up.</p>\n\n<h1>\n  <a name=\"justification\" href=\"#justification\" class=\"anchor\">\n  </a>\n  Justification\n</h1>\n\n<p>Consider the following, completely valid TypeScript code:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">try</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"na\">x</span><span class=\"p\">:</span> <span class=\"kr\">number</span> <span class=\"o\">=</span> <span class=\"mi\">7</span><span class=\"p\">;</span>\n  <span class=\"k\">throw</span> <span class=\"nx\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"k\">typeof</span> <span class=\"nx\">e</span><span class=\"p\">);</span> <span class=\"c1\">// \"number\"</span>\n  <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">);</span> <span class=\"c1\">// 7</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>You can quite literally throw anything.</figcaption></figure>\n\n\n\n\n\n<p>It’s easy to see why this can be a problem.  One use-case where this is less than ideal is consuming a web API from TypeScript. It’s quite common for non-success HTTP status codes (500 Internal Server Error, 404 Not Found, etc.) to be thrown as an error by API consumer code.</p>\n\n<h1>\n  <a name=\"usage\" href=\"#usage\" class=\"anchor\">\n  </a>\n  Usage\n</h1>\n\n<p>Let’s consider an example using some utilities from <a href=\"https://github.com/AndcultureCode/AndcultureCode.JavaScript.Core\">AndcultureCode.JavaScript.Core</a> and <a href=\"https://github.com/AndcultureCode/AndcultureCode.JavaScript.React\">AndcultureCode.JavaScript.React</a>, which wrap up API responses and errors in <code>ResultRecord</code> and <code>ResultErrorRecord</code> <a href=\"https://github.com/immutable-js/immutable-js\">Immutable.js</a> <code>Record</code> types.<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"cm\">/*\nLet's say the API returns a 500 error, with an error\nresult JSON object:\n-- Status: 500\n-- Data:\n{\n  \"errors\": [\n    {\n      \"key\": \"UserAlreadyExists\",\n      \"message\": \"User with specified email already exists.\",\n      \"type\": \"Validation\"\n    }\n  ]\n  \"resultObject\": undefined\n}\n*/</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">createUserApi</span> <span class=\"o\">=</span> <span class=\"nx\">ServiceFactory</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">UserRecord</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">/api/users/</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">createUser</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">:</span> <span class=\"nx\">UserRecord</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">UserRecord</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"o\">&gt;</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">try</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">createUserApi</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">resultObject</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">catch</span> <span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// if the thing that was thrown is a ResultRecord, show a toast message for each error</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"k\">instanceof</span> <span class=\"nx\">ResultRecord</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"nx\">ResultErrorRecord</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">toast</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">));</span>\n      <span class=\"k\">return</span> <span class=\"kc\">undefined</span><span class=\"p\">.</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"c1\">// otherwise, it could be anything, so just show a generic error message</span>\n    <span class=\"nx\">toast</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">There was an issue creating the user.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"kc\">undefined</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">finally</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// maybe we need to turn off a loading indicator here</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n\n\n<p>You can see in this example that handling errors natively in TypeScript is… quite sloppy. The <a href=\"https://en.wikipedia.org/wiki/Monad_%28functional_programming%29#An_example:_Maybe\">“maybe monad”</a> common pattern to more generically handle errors and control flow. Basically, what we want to do is create an abstraction that can strongly type thrown errors to a specified type that you know is likely to be thrown. In our case, we want to be able to handle errors from a strongly typed <code>ResultRecord</code> with <code>ResultErrorRecord</code>s inside it.</p>\n\n<p>What if we could take the example above, and represent the same logic but with less code and strong typing in the catch block? In the following example, one of <code>result</code> or <code>error</code> will be non-null, but not both.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"cm\">/*\nLet's say the API returns the same response as before.\nresult JSON object:\n-- Status: 500\n-- Data:\n{\n  \"errors\": [\n    {\n      \"key\": \"UserAlreadyExists\",\n      \"message\": \"User with specified email already exists.\",\n      \"type\": \"Validation\"\n    }\n  ]\n  \"resultObject\": undefined\n}\n*/</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">createUserApi</span> <span class=\"o\">=</span> <span class=\"nx\">ServiceFactory</span><span class=\"p\">.</span><span class=\"nx\">create</span><span class=\"p\">(</span><span class=\"nx\">UserRecord</span><span class=\"p\">,</span> <span class=\"dl\">\"</span><span class=\"s2\">/api/users/</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">createUser</span> <span class=\"o\">=</span> <span class=\"k\">async</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">:</span> <span class=\"nx\">UserRecord</span><span class=\"p\">):</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">UserRecord</span> <span class=\"o\">|</span> <span class=\"kc\">undefined</span><span class=\"o\">&gt;</span> <span class=\"o\">=&gt;</span>\n  <span class=\"k\">await</span> <span class=\"nx\">Do</span><span class=\"p\">.</span><span class=\"k\">try</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">createUserApi</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">resultObject</span><span class=\"p\">;</span>\n  <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">result</span><span class=\"p\">?:</span> <span class=\"nx\">ResultRecord</span><span class=\"o\">&lt;</span><span class=\"nx\">UserRecord</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">?:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// if result is not null, it will have errors; show toast errors</span>\n    <span class=\"nx\">result</span><span class=\"p\">?.</span><span class=\"nx\">errors</span><span class=\"p\">?.</span><span class=\"nx\">forEach</span><span class=\"p\">((</span><span class=\"na\">e</span><span class=\"p\">:</span> <span class=\"nx\">ResultErrorRecord</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">toast</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">message</span><span class=\"p\">));</span>\n    <span class=\"c1\">// otherwise, unknown error; show a generic toast message</span>\n    <span class=\"nx\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">toast</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">There was an issue creating the user.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n  <span class=\"p\">}).</span><span class=\"k\">finally</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// maybe we need to turn off a loading indicator here</span>\n  <span class=\"p\">}).</span><span class=\"nx\">getAwaiter</span><span class=\"p\">();</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Automatic typecasting? Nice 😎</figcaption></figure>\n\n\n\n\n\n<p>This pattern gives us a more functional approach to error handling, gives us <strong>strongly typed</strong> errors, and works really, really nicely when used in combination with <a href=\"https://reactjs.org/docs/hooks-intro.html\">React hooks</a>. Let’s take a look at a simple React example using some infrastructure from <a href=\"https://github.com/AndcultureCode/AndcultureCode.JavaScript.Core\">AndcultureCode.JavaScript.Core</a>, <a href=\"https://github.com/AndcultureCode/AndcultureCode.JavaScript.React\">AndcultureCode.JavaScript.React</a> and <a href=\"https://github.com/AndcultureCode/AndcultureCode.JavaScript.React.Components\">AndcultureCode.JavaScript.React.Components</a>:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">LoginForm</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FunctionComponent</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"kd\">const</span> <span class=\"p\">{</span> <span class=\"na\">create</span><span class=\"p\">:</span> <span class=\"nx\">createUserApi</span> <span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nx\">UserService</span><span class=\"p\">.</span><span class=\"nx\">useCreate</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"nx\">history</span> <span class=\"o\">=</span> <span class=\"nx\">useHistory</span><span class=\"p\">();</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">setUser</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"k\">new</span> <span class=\"nx\">UserRecord</span><span class=\"p\">());</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">errors</span><span class=\"p\">,</span> <span class=\"nx\">setErrors</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"o\">&lt;</span><span class=\"nb\">Array</span><span class=\"o\">&lt;</span><span class=\"nx\">ResultErrorRecord</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">([]);</span>\n  <span class=\"kd\">const</span> <span class=\"p\">[</span><span class=\"nx\">loading</span><span class=\"p\">,</span> <span class=\"nx\">setLoading</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nx\">useState</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">);</span>\n\n  <span class=\"kd\">const</span> <span class=\"nx\">createUser</span> <span class=\"o\">=</span> <span class=\"nx\">useCallback</span><span class=\"p\">(</span>\n    <span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">await</span> <span class=\"nx\">Do</span><span class=\"p\">.</span><span class=\"k\">try</span><span class=\"p\">(</span><span class=\"k\">async</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">setErrors</span><span class=\"p\">([]);</span>\n      <span class=\"nx\">setLoading</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n      <span class=\"kd\">const</span> <span class=\"nx\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"nx\">createUserApi</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">);</span>\n      <span class=\"nx\">history</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">RouteUtils</span><span class=\"p\">.</span><span class=\"nx\">getUrl</span><span class=\"p\">(</span><span class=\"nx\">siteMap</span><span class=\"p\">.</span><span class=\"nx\">myProfile</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"na\">userId</span><span class=\"p\">:</span> <span class=\"nx\">result</span><span class=\"p\">.</span><span class=\"nx\">resultObject</span><span class=\"o\">!</span><span class=\"p\">.</span><span class=\"nx\">id</span><span class=\"o\">!</span> <span class=\"p\">}));</span>\n    <span class=\"p\">}).</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"nx\">result</span><span class=\"p\">?:</span> <span class=\"nx\">ResultRecord</span><span class=\"o\">&lt;</span><span class=\"nx\">UserRecord</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">?:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">setErrors</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">?.</span><span class=\"nx\">errors</span> <span class=\"o\">??</span> <span class=\"p\">[]);</span>\n      <span class=\"nx\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">toast</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">There was an issue signing up.</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n    <span class=\"p\">}).</span><span class=\"k\">finally</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setLoading</span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"p\">))</span>\n      <span class=\"p\">.</span><span class=\"nx\">getAwaiter</span><span class=\"p\">(),</span>\n    <span class=\"p\">[</span><span class=\"nx\">createUserApi</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">]</span>\n  <span class=\"p\">);</span>\n\n  <span class=\"k\">return</span> <span class=\"p\">(</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">div</span> <span class=\"nx\">className</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">c-login-form</span><span class=\"dl\">\"</span><span class=\"o\">&gt;</span>\n      <span class=\"o\">&lt;</span><span class=\"nx\">InputFormField</span>\n        <span class=\"nx\">disabled</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">loading</span><span class=\"p\">}</span>\n        <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">Email</span><span class=\"dl\">\"</span>\n        <span class=\"nx\">required</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span>\n        <span class=\"kd\">type</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">InputTypes</span><span class=\"p\">.</span><span class=\"nx\">Email</span><span class=\"p\">}</span>\n        <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">email</span><span class=\"p\">}</span>\n        <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setUser</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"kd\">with</span><span class=\"p\">({</span> <span class=\"na\">email</span><span class=\"p\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">})}</span>\n        <span class=\"nx\">errors</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">key</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">SignUp.Email</span><span class=\"dl\">\"</span><span class=\"p\">)}</span>\n      <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"nx\">InputFormField</span>\n        <span class=\"nx\">disabled</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">loading</span><span class=\"p\">}</span>\n        <span class=\"nx\">label</span><span class=\"o\">=</span><span class=\"dl\">\"</span><span class=\"s2\">Password</span><span class=\"dl\">\"</span>\n        <span class=\"nx\">required</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"kc\">true</span><span class=\"p\">}</span>\n        <span class=\"kd\">type</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">InputTypes</span><span class=\"p\">.</span><span class=\"nx\">Password</span><span class=\"p\">}</span>\n        <span class=\"nx\">value</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"nx\">password</span><span class=\"p\">}</span>\n        <span class=\"nx\">onChange</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">setUser</span><span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">.</span><span class=\"kd\">with</span><span class=\"p\">({</span> <span class=\"na\">password</span><span class=\"p\">:</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">target</span><span class=\"p\">.</span><span class=\"nx\">value</span> <span class=\"p\">})}</span>\n        <span class=\"nx\">errors</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">errors</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"nx\">e</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">e</span><span class=\"p\">.</span><span class=\"nx\">key</span> <span class=\"o\">===</span> <span class=\"dl\">\"</span><span class=\"s2\">SignUp.Password</span><span class=\"dl\">\"</span><span class=\"p\">)}</span>\n      <span class=\"sr\">/</span><span class=\"err\">&gt;\n</span>      <span class=\"o\">&lt;</span><span class=\"nx\">Button</span> <span class=\"nx\">onClick</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"nx\">createUser</span><span class=\"p\">}</span><span class=\"o\">&gt;</span><span class=\"nx\">Sign</span> <span class=\"nx\">Up</span><span class=\"o\">&lt;</span><span class=\"sr\">/Button</span><span class=\"err\">&gt;\n</span>      <span class=\"p\">{</span><span class=\"nx\">loading</span> <span class=\"o\">&amp;&amp;</span> <span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"nx\">LoadingSpinner</span><span class=\"o\">/&gt;</span><span class=\"p\">)}</span>\n    <span class=\"o\">&lt;</span><span class=\"sr\">/div</span><span class=\"err\">&gt;\n</span>  <span class=\"p\">);</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Strong typing is better than weak typing.</figcaption></figure>\n\n\n\n\n\n<p>Clean, concise, and strongly typed error handling in just 46 lines of code, including the UI.</p>\n\n<h1>\n  <a name=\"implementation\" href=\"#implementation\" class=\"anchor\">\n  </a>\n  Implementation\n</h1>\n\n<p>So how does this fancy-schmancy <code>Do.try</code> work under the hood? By adding an abstraction on top of regular old <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>s. Let’s break it down.</p>\n\n<p>First, let’s define some utility types we’re going to need:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"cm\">/**\n * Represents an asynchronous method reference.\n */</span>\n<span class=\"kd\">type</span> <span class=\"nx\">AsyncWorkload</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n * Handler for a typed error ResultRecord, or any type if a Javascript error occurred.\n */</span>\n<span class=\"kd\">type</span> <span class=\"nx\">CatchResultHandler</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">?:</span> <span class=\"nx\">ResultRecord</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">?:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n * Handler for Do.try().finally(); Runs whether an error occurred or not.\n */</span>\n<span class=\"kd\">type</span> <span class=\"nx\">FinallyHandler</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"k\">void</span><span class=\"p\">;</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Strongly typed handlers for strongly typed errors.</figcaption></figure>\n\n\n\n\n\n<p>Next, let’s take a look at our constructor:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span> <span class=\"o\">=</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">private</span> <span class=\"na\">promise</span><span class=\"p\">:</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n  <span class=\"k\">private</span> <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"na\">workload</span><span class=\"p\">:</span> <span class=\"nx\">AsyncWorkload</span><span class=\"o\">&lt;</span><span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"nx\">workload</span><span class=\"p\">();</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Private constructor? 🤔</figcaption></figure>\n\n\n\n\n\n<p>That <code>private constructor</code> is no mistake. You’ll notice in the previous snippets, usage of this pattern starts with <code>Do.try</code>; that’s because <code>try</code> is a static factory method that returns an instance of <code>Do</code>. The <code>private constructor</code> can only be called internally to the class, by the <code>try</code> method. The implementation of <code>try</code> is very straightforward:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span> <span class=\"o\">=</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span> \n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"k\">try</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span> <span class=\"o\">=</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n    <span class=\"na\">workload</span><span class=\"p\">:</span> <span class=\"nx\">AsyncWorkload</span><span class=\"o\">&lt;</span><span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">):</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">new</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"nx\">workload</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>You’ll never know unless you… try.</figcaption></figure>\n\n\n\n\n\n<p>The <code>finally</code> method is just as straightforward, with one important caveat:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span> <span class=\"o\">=</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"k\">public</span> <span class=\"k\">finally</span><span class=\"p\">(</span>\n    <span class=\"na\">finallyHandler</span><span class=\"p\">:</span> <span class=\"nx\">FinallyHandler</span>\n  <span class=\"p\">):</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"k\">finally</span><span class=\"p\">(</span><span class=\"nx\">finallyHandler</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Pay special attention to the return value.</figcaption></figure>\n\n\n\n\n\n<p>Notice the return value, <code>return this;</code> This allows for method chaining, i.e. <code>Do.try(workload).catch(catchHandler).finally(finallyHandler);</code> In this code, <code>catch</code> and <code>finally</code> are both called on the same instance of <code>Do</code> which is returned from <code>Do.try</code>.</p>\n\n<p>There’s also a <code>getAwaiter</code> method, which allows us to <code>await</code> for the result. All we need to do is return the internal promise.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span> <span class=\"o\">=</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"k\">public</span> <span class=\"k\">async</span> <span class=\"nx\">getAwaiter</span><span class=\"p\">():</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">promise</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>This just allows us to await the result of the entire method chain.</figcaption></figure>\n\n\n\n\n\n<p>Now let’s get to the interesting part; the <code>catch</code> method. Inside the catch method, we’re going to <a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards\">type guard</a> the thrown object; if the thrown object is a <code>ResultRecord</code> instance, we cast it as such and pass it as the catch handler’s first argument; otherwise, it’s some unknown error, so we pass it as the catch handler’s second argument. We also need to cast the promise back to a <code>Promise&lt;TReturnVal&gt;</code> because of the return type of <code>Promise.catch</code>, but the promise is still a valid <code>Promise&lt;TReturnVal&gt;</code>.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">class</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span> <span class=\"o\">=</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"k\">public</span> <span class=\"k\">catch</span><span class=\"p\">(</span>\n    <span class=\"na\">errorHandler</span><span class=\"p\">:</span> <span class=\"nx\">CatchResultHandler</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"o\">&gt;</span>\n  <span class=\"p\">):</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">promise</span><span class=\"p\">.</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">err</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// check if thrown object is a ResultRecord</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"k\">instanceof</span> <span class=\"nx\">ResultRecord</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// pass the ResultRecord as the first parameter</span>\n        <span class=\"nx\">errorHandler</span><span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span>\n        <span class=\"k\">return</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"c1\">// otherwise, pass the generic error as the second parameter</span>\n      <span class=\"nx\">errorHandler</span><span class=\"p\">(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">);</span>\n    <span class=\"p\">})</span> <span class=\"k\">as</span> <span class=\"nb\">Promise</span><span class=\"o\">&lt;</span><span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// notice again, we are returning this to allow method chaining</span>\n    <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>We just need to cast the promise back to a `Promise` because of the return type of `Promise.catch`, but rest assured, the promise is still a valid `Promise`.</figcaption></figure>\n\n\n\n\n\n<p>And there you have a basic implementation of a “maybe monad”. While the implementation here is an opinionated one, offering strongly typed error handling for <code>ResultRecord</code> errors, you could easily implement the same thing for virtually any type you want to use to wrap up your errors, just as long as you’re able to implement a type guard for it.</p>\n\n<h1>\n  <a name=\"taking-it-further\" href=\"#taking-it-further\" class=\"anchor\">\n  </a>\n  Taking It Further\n</h1>\n\n<p>I think strongly typed error handling speaks enough for itself, but we can take it even further. This pattern enables an extremely powerful utility, and I think it’s the strongest argument for using it: <a href=\"https://en.wikipedia.org/wiki/Default_(computer_science)#In_application_software\"><em>default behavior</em></a>. We can extend our <code>Do</code> class to have a global configuration, allowing us to define <em>default behavior which is applied to every instance of <code>Do</code> across the entire application</em>.</p>\n\n<p>All we need to do is add a static configuration mechanism, and implement a check for our configuration inside the constructor:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kr\">interface</span> <span class=\"nx\">DoTryConfig</span> <span class=\"p\">{</span>\n  <span class=\"cm\">/**\n   * A default handler that will always run on error, if configured,\n   * even if a `catch()` does not exist in the call chain.\n   * This is useful for adding default error handling in the\n   * development environment, such as `console.error(err)`.\n   */</span>\n  <span class=\"nl\">defaultErrorHandler</span><span class=\"p\">?:</span> <span class=\"nx\">CatchResultHandler</span><span class=\"o\">&lt;</span><span class=\"kr\">any</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">Do</span><span class=\"o\">&lt;</span><span class=\"nx\">TResourceType</span><span class=\"p\">,</span> <span class=\"nx\">TReturnVal</span> <span class=\"o\">=</span> <span class=\"k\">void</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"p\">...</span>\n  <span class=\"k\">private</span> <span class=\"k\">static</span> <span class=\"na\">config</span><span class=\"p\">:</span> <span class=\"nx\">DoTryConfig</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"na\">defaultErrorHandler</span><span class=\"p\">:</span> <span class=\"kc\">undefined</span><span class=\"p\">,</span>\n  <span class=\"p\">};</span>\n\n  <span class=\"k\">private</span> <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"na\">workload</span><span class=\"p\">:</span> <span class=\"nx\">AsyncWorkload</span><span class=\"o\">&lt;</span><span class=\"nx\">TReturnVal</span><span class=\"o\">&gt;</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">promise</span> <span class=\"o\">=</span> <span class=\"nx\">workload</span><span class=\"p\">().</span><span class=\"k\">catch</span><span class=\"p\">((</span><span class=\"na\">err</span><span class=\"p\">:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"c1\">// check for defaultErrorHandler from config</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">err</span> <span class=\"k\">instanceof</span> <span class=\"nx\">ResultRecord</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"nx\">Do</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">defaultErrorHandler</span><span class=\"p\">?.(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"kc\">undefined</span><span class=\"p\">);</span>\n        <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span> <span class=\"c1\">// rethrow so it doesn't interrupt call chain</span>\n      <span class=\"p\">}</span>\n\n      <span class=\"nx\">Do</span><span class=\"p\">.</span><span class=\"nx\">config</span><span class=\"p\">.</span><span class=\"nx\">defaultErrorHandler</span><span class=\"p\">?.(</span><span class=\"kc\">undefined</span><span class=\"p\">,</span> <span class=\"nx\">err</span><span class=\"p\">);</span>\n      <span class=\"k\">throw</span> <span class=\"nx\">err</span><span class=\"p\">;</span> <span class=\"c1\">// rethrow so it doesn't interrupt call chain</span>\n    <span class=\"p\">});</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"cm\">/**\n   * Sets the global configuration object for class {Do}\n   * @param config the {DoTryConfig} object to set\n   */</span>\n  <span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"nx\">configure</span><span class=\"p\">(</span><span class=\"na\">config</span><span class=\"p\">:</span> <span class=\"nx\">DoTryConfig</span><span class=\"p\">):</span> <span class=\"k\">void</span> <span class=\"p\">{</span>\n    <span class=\"nx\">Do</span><span class=\"p\">.</span><span class=\"nx\">config</span> <span class=\"o\">=</span> <span class=\"nx\">config</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Default behavior is epic.</figcaption></figure>\n\n\n\n\n\n<p>So what does it look like to apply default behavior? Let’s contrive an example.</p>\n\n<p>We’re working on a large scale React application, and in order to aid debugging errors during development, we want to always log errors to the console in the development environment. Well, with the configuration mechanism we just added, it becomes trivially easy to add this default behavior. Just open up your <code>index.ts</code> app entrypoint and add the handler:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"c1\">// index.ts</span>\n\n<span class=\"nx\">EnvironmentUtils</span><span class=\"p\">.</span><span class=\"nx\">runIfDevelopment</span><span class=\"p\">(()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"nx\">Do</span><span class=\"p\">.</span><span class=\"nx\">configure</span><span class=\"p\">({</span>\n    <span class=\"na\">defaultErrorHandler</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">?:</span> <span class=\"nx\">ResultRecord</span><span class=\"o\">&lt;</span><span class=\"kr\">any</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">error</span><span class=\"p\">?:</span> <span class=\"kr\">any</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n      <span class=\"nx\">result</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">result</span><span class=\"p\">);</span>\n      <span class=\"nx\">error</span> <span class=\"o\">!=</span> <span class=\"kc\">null</span> <span class=\"o\">&amp;&amp;</span> <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">});</span>\n<span class=\"p\">});</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Log errors to the console by default.</figcaption></figure>\n\n\n\n\n\n<p>You could use the same configuration mechanism to add default behavior to the <code>try</code> or <code>finally</code> portions of the call chain as well. Feel free to peruse the full implementation used in production <a href=\"https://github.com/AndcultureCode/AndcultureCode.JavaScript.Core/blob/main/src/utilities/do-try.ts\">here</a>.</p>\n\n<p>The syntax is quite nice to read and easy to understand at a glace, but with the added bonus of having strongly typed errors, and optional default behavior.</p>\n\n<p>What do you think? Are you going to try “maybe monads” or the <code>Do.try</code> pattern in your next TypeScript project?</p>\n\n","body_markdown":"TypeScript is a great language. TypeScript takes JavaScript and makes it _actually good._ If there’s one glaring weakness, it’s the [inability to use strongly typed catch blocks](https://github.com/Microsoft/TypeScript/issues/8677). However, this is mostly due to a design flaw in the JavaScript language; in JavaScript, you can `throw` _anything_, not just `Error` types.\n\nA Note Before We Start\n======================\n\nWhile I used some packages from the `AndcultureCode` GitHub organization, it just made this proof-of-concept easier to demonstrate. This same pattern could be easily applied without using any of these packages, and could be tied in with whatever existing infrastructure you have set up.\n\nJustification\n=============\n\nConsider the following, completely valid TypeScript code:\n```ts\ntry {\n  const x: number = 7;\n  throw x;\n} catch (e) {\n  console.log(typeof e); // \"number\"\n  console.log(e); // 7\n}\n```\n<figcaption>You can quite literally throw anything.</figcaption>\n\nIt’s easy to see why this can be a problem.  One use-case where this is less than ideal is consuming a web API from TypeScript. It’s quite common for non-success HTTP status codes (500 Internal Server Error, 404 Not Found, etc.) to be thrown as an error by API consumer code.\n\nUsage\n=====\n\nLet’s consider an example using some utilities from [AndcultureCode.JavaScript.Core](https://github.com/AndcultureCode/AndcultureCode.JavaScript.Core) and [AndcultureCode.JavaScript.React](https://github.com/AndcultureCode/AndcultureCode.JavaScript.React), which wrap up API responses and errors in `ResultRecord` and `ResultErrorRecord` [Immutable.js](https://github.com/immutable-js/immutable-js) `Record` types.\n\n```ts\n/*\nLet's say the API returns a 500 error, with an error\nresult JSON object:\n-- Status: 500\n-- Data:\n{\n  \"errors\": [\n    {\n      \"key\": \"UserAlreadyExists\",\n      \"message\": \"User with specified email already exists.\",\n      \"type\": \"Validation\"\n    }\n  ]\n  \"resultObject\": undefined\n}\n*/\n\nconst createUserApi = ServiceFactory.create(UserRecord, \"/api/users/\");\n\nconst createUser = async (user: UserRecord): Promise<UserRecord | undefined> => {\n  try {\n    const result = await createUserApi(user);\n    return result.resultObject;\n  } catch (e) {\n    // if the thing that was thrown is a ResultRecord, show a toast message for each error\n    if (e instanceof ResultRecord) {\n      e.errors.forEach((error: ResultErrorRecord) => toast.error(error.message));\n      return undefined.\n    }\n  \n    // otherwise, it could be anything, so just show a generic error message\n    toast.error(\"There was an issue creating the user.\");\n    return undefined;\n  } finally {\n    // maybe we need to turn off a loading indicator here\n  }\n};\n```\n\nYou can see in this example that handling errors natively in TypeScript is… quite sloppy. The [“maybe monad”](https://en.wikipedia.org/wiki/Monad_%28functional_programming%29#An_example:_Maybe) common pattern to more generically handle errors and control flow. Basically, what we want to do is create an abstraction that can strongly type thrown errors to a specified type that you know is likely to be thrown. In our case, we want to be able to handle errors from a strongly typed `ResultRecord` with `ResultErrorRecord`s inside it.\n\nWhat if we could take the example above, and represent the same logic but with less code and strong typing in the catch block? In the following example, one of `result` or `error` will be non-null, but not both.\n\n```ts\n/*\nLet's say the API returns the same response as before.\nresult JSON object:\n-- Status: 500\n-- Data:\n{\n  \"errors\": [\n    {\n      \"key\": \"UserAlreadyExists\",\n      \"message\": \"User with specified email already exists.\",\n      \"type\": \"Validation\"\n    }\n  ]\n  \"resultObject\": undefined\n}\n*/\n\nconst createUserApi = ServiceFactory.create(UserRecord, \"/api/users/\");\n\nconst createUser = async (user: UserRecord): Promise<UserRecord | undefined> =>\n  await Do.try(async () => {\n    const result = await createUserApi(user);\n    return result.resultObject;\n  }).catch((result?: ResultRecord<UserRecord>, error?: any) => {\n    // if result is not null, it will have errors; show toast errors\n    result?.errors?.forEach((e: ResultErrorRecord) => toast.error(e.message));\n    // otherwise, unknown error; show a generic toast message\n    error != null && toast.error(\"There was an issue creating the user.\");\n  }).finally(() => {\n    // maybe we need to turn off a loading indicator here\n  }).getAwaiter();\n```\n<figcaption>Automatic typecasting? Nice 😎</figcaption>\n\nThis pattern gives us a more functional approach to error handling, gives us **strongly typed** errors, and works really, really nicely when used in combination with [React hooks](https://reactjs.org/docs/hooks-intro.html). Let’s take a look at a simple React example using some infrastructure from [AndcultureCode.JavaScript.Core](https://github.com/AndcultureCode/AndcultureCode.JavaScript.Core), [AndcultureCode.JavaScript.React](https://github.com/AndcultureCode/AndcultureCode.JavaScript.React) and [AndcultureCode.JavaScript.React.Components](https://github.com/AndcultureCode/AndcultureCode.JavaScript.React.Components):\n\n```ts\nconst LoginForm: React.FunctionComponent = () => {\n  const { create: createUserApi } = UserService.useCreate();\n  const history = useHistory();\n  const [user, setUser] = useState(new UserRecord());\n  const [errors, setErrors] = useState<Array<ResultErrorRecord>>([]);\n  const [loading, setLoading] = useState(false);\n\n  const createUser = useCallback(\n    async () => await Do.try(async () => {\n      setErrors([]);\n      setLoading(true);\n      const result = await createUserApi(user);\n      history.push(RouteUtils.getUrl(siteMap.myProfile, { userId: result.resultObject!.id! }));\n    }).catch((result?: ResultRecord<UserRecord>, error?: any) => {\n      setErrors(result?.errors ?? []);\n      error != null && toast.error(\"There was an issue signing up.\");\n    }).finally(() => setLoading(false))\n      .getAwaiter(),\n    [createUserApi, user]\n  );\n\n  return (\n    <div className=\"c-login-form\">\n      <InputFormField\n        disabled={loading}\n        label=\"Email\"\n        required={true}\n        type={InputTypes.Email}\n        value={user.email}\n        onChange={e => setUser(user.with({ email: e.target.value })}\n        errors={errors.filter(e => e.key === \"SignUp.Email\")}\n      />\n      <InputFormField\n        disabled={loading}\n        label=\"Password\"\n        required={true}\n        type={InputTypes.Password}\n        value={user.password}\n        onChange={e => setUser(user.with({ password: e.target.value })}\n        errors={errors.filter(e => e.key === \"SignUp.Password\")}\n      />\n      <Button onClick={createUser}>Sign Up</Button>\n      {loading && (<LoadingSpinner/>)}\n    </div>\n  );\n};\n```\n<figcaption>Strong typing is better than weak typing.</figcaption>\n\nClean, concise, and strongly typed error handling in just 46 lines of code, including the UI.\n\nImplementation\n==============\n\nSo how does this fancy-schmancy `Do.try` work under the hood? By adding an abstraction on top of regular old [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)s. Let’s break it down.\n\nFirst, let’s define some utility types we’re going to need:\n\n```ts\n/**\n * Represents an asynchronous method reference.\n */\ntype AsyncWorkload<T> = () => Promise<T>;\n\n/**\n * Handler for a typed error ResultRecord, or any type if a Javascript error occurred.\n */\ntype CatchResultHandler<T> = (result?: ResultRecord<T>, error?: any) => void;\n\n/**\n * Handler for Do.try().finally(); Runs whether an error occurred or not.\n */\ntype FinallyHandler = () => void;\n```\n<figcaption>Strongly typed handlers for strongly typed errors.</figcaption>\n\nNext, let’s take a look at our constructor:\n\n```ts\nclass Do<TResourceType, TReturnVal = void> {\n  private promise: Promise<TReturnVal>;\n  \n  private constructor(workload: AsyncWorkload<TReturnVal>) {\n    this.promise = workload();\n  }\n}\n```\n<figcaption>Private constructor? 🤔</figcaption>\n\nThat `private constructor` is no mistake. You’ll notice in the previous snippets, usage of this pattern starts with `Do.try`; that’s because `try` is a static factory method that returns an instance of `Do`. The `private constructor` can only be called internally to the class, by the `try` method. The implementation of `try` is very straightforward:\n\n```ts\nclass Do<TResourceType, TReturnVal = void> {\n  ... \n  public static try<TResourceType, TReturnVal = void>(\n    workload: AsyncWorkload<TReturnVal>\n  ): Do<TResourceType, TReturnVal> {\n    return new Do<TResourceType, TReturnVal>(workload);\n  }\n}\n```\n<figcaption>You’ll never know unless you… try.</figcaption>\n\nThe `finally` method is just as straightforward, with one important caveat:\n\n```ts\nclass Do<TResourceType, TReturnVal = void> {\n  ...\n  public finally(\n    finallyHandler: FinallyHandler\n  ): Do<TResourceType, TReturnVal> {\n    this.promise = this.promise.finally(finallyHandler);\n    return this;\n  }\n}\n```\n<figcaption>Pay special attention to the return value.</figcaption>\n\nNotice the return value, `return this;` This allows for method chaining, i.e. `Do.try(workload).catch(catchHandler).finally(finallyHandler);` In this code, `catch` and `finally` are both called on the same instance of `Do` which is returned from `Do.try`.\n\nThere’s also a `getAwaiter` method, which allows us to `await` for the result. All we need to do is return the internal promise.\n\n```ts\nclass Do<TResourceType, TReturnVal = void> {\n  ...\n  public async getAwaiter(): Promise<TReturnVal> {\n    return this.promise;\n  }\n}\n```\n<figcaption>This just allows us to await the result of the entire method chain.</figcaption>\n\nNow let’s get to the interesting part; the `catch` method. Inside the catch method, we’re going to [type guard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards) the thrown object; if the thrown object is a `ResultRecord` instance, we cast it as such and pass it as the catch handler’s first argument; otherwise, it’s some unknown error, so we pass it as the catch handler’s second argument. We also need to cast the promise back to a `Promise<TReturnVal>` because of the return type of `Promise.catch`, but the promise is still a valid `Promise<TReturnVal>`.\n\n```ts\nclass Do<TResourceType, TReturnVal = void> {\n  public catch(\n    errorHandler: CatchResultHandler<TResourceType>\n  ): Do<TResourceType, TReturnVal> {\n    this.promise = this.promise.catch((err: any) => {\n      // check if thrown object is a ResultRecord\n      if (err instanceof ResultRecord) {\n        // pass the ResultRecord as the first parameter\n        errorHandler(err, undefined);\n        return;\n      }\n      \n      // otherwise, pass the generic error as the second parameter\n      errorHandler(undefined, err);\n    }) as Promise<TReturnVal>;\n    \n    // notice again, we are returning this to allow method chaining\n    return this;\n  }\n}\n```\n<figcaption>We just need to cast the promise back to a `Promise<TReturnVal>` because of the return type of `Promise.catch`, but rest assured, the promise is still a valid `Promise<TReturnVal>`.</figcaption>\n\nAnd there you have a basic implementation of a “maybe monad”. While the implementation here is an opinionated one, offering strongly typed error handling for `ResultRecord` errors, you could easily implement the same thing for virtually any type you want to use to wrap up your errors, just as long as you’re able to implement a type guard for it.\n\nTaking It Further\n=================\n\nI think strongly typed error handling speaks enough for itself, but we can take it even further. This pattern enables an extremely powerful utility, and I think it’s the strongest argument for using it: [_default behavior_](https://en.wikipedia.org/wiki/Default_(computer_science)#In_application_software). We can extend our `Do` class to have a global configuration, allowing us to define _default behavior which is applied to every instance of `Do` across the entire application_.\n\nAll we need to do is add a static configuration mechanism, and implement a check for our configuration inside the constructor:\n\n```ts\ninterface DoTryConfig {\n  /**\n   * A default handler that will always run on error, if configured,\n   * even if a `catch()` does not exist in the call chain.\n   * This is useful for adding default error handling in the\n   * development environment, such as `console.error(err)`.\n   */\n  defaultErrorHandler?: CatchResultHandler<any>;\n}\n\nclass Do<TResourceType, TReturnVal = void> {\n  ...\n  private static config: DoTryConfig = {\n    defaultErrorHandler: undefined,\n  };\n  \n  private constructor(workload: AsyncWorkload<TReturnVal>) {\n    this.promise = workload().catch((err: any) => {\n      // check for defaultErrorHandler from config\n      if (err instanceof ResultRecord) {\n        Do.config.defaultErrorHandler?.(err, undefined);\n        throw err; // rethrow so it doesn't interrupt call chain\n      }\n\n      Do.config.defaultErrorHandler?.(undefined, err);\n      throw err; // rethrow so it doesn't interrupt call chain\n    });\n  }\n  \n  /**\n   * Sets the global configuration object for class {Do}\n   * @param config the {DoTryConfig} object to set\n   */\n  public static configure(config: DoTryConfig): void {\n    Do.config = config;\n  }\n}\n```\n<figcaption>Default behavior is epic.</figcaption>\n\nSo what does it look like to apply default behavior? Let’s contrive an example.\n\nWe’re working on a large scale React application, and in order to aid debugging errors during development, we want to always log errors to the console in the development environment. Well, with the configuration mechanism we just added, it becomes trivially easy to add this default behavior. Just open up your `index.ts` app entrypoint and add the handler:\n\n```ts\n// index.ts\n\nEnvironmentUtils.runIfDevelopment(() => {\n  Do.configure({\n    defaultErrorHandler: (result?: ResultRecord<any>, error?: any) => {\n      result != null && console.error(result);\n      error != null && console.error(error);\n    }\n  });\n});\n```\n<figcaption>Log errors to the console by default.</figcaption>\n\nYou could use the same configuration mechanism to add default behavior to the `try` or `finally` portions of the call chain as well. Feel free to peruse the full implementation used in production [here](https://github.com/AndcultureCode/AndcultureCode.JavaScript.Core/blob/main/src/utilities/do-try.ts).\n\nThe syntax is quite nice to read and easy to understand at a glace, but with the added bonus of having strongly typed errors, and optional default behavior.\n\nWhat do you think? Are you going to try “maybe monads” or the `Do.try` pattern in your next TypeScript project?\n","user":{"name":"Mat Jones","username":"matjones","twitter_username":null,"github_username":"mrjones2014","website_url":"https://mjones.network","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rzQaKEWl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--lIbHS3Lt--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png"}}},"__N_SSG":true}