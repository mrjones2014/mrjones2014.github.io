{"pageProps":{"article":{"type_of":"article","id":573394,"title":"Code Comments Are Stupid","description":"Code comments are lame.  Code comments once served a critical purpose; adding context or explanation...","readable_publish_date":"Jan 16","slug":"code-comments-are-stupid-m5n","path":"/matjones/code-comments-are-stupid-m5n","url":"https://dev.to/matjones/code-comments-are-stupid-m5n","comments_count":6,"public_reactions_count":8,"collection_id":null,"published_timestamp":"2021-01-16T14:49:49Z","positive_reactions_count":8,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--NcfjQn77--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/8x8jqz2mbw50qxpoain7.png","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--mY6oSWRX--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/8x8jqz2mbw50qxpoain7.png","canonical_url":"https://dev.to/matjones/code-comments-are-stupid-m5n","created_at":"2021-01-16T14:49:49Z","edited_at":null,"crossposted_at":null,"published_at":"2021-01-16T14:49:49Z","last_comment_at":"2021-01-19T17:40:07Z","tag_list":"comments, cleancode, programming, kotlin","tags":["comments","cleancode","programming","kotlin"],"body_html":"<p>Code comments are lame.</p>\n\n<p>Code comments once served a critical purpose; adding context or explanation to a snippet of code. But this was back when programming languages were mostly esoteric, and the barrier to entry for writing code was extremely high.</p>\n\n<p>Today, though, we have extremely <a href=\"https://stackoverflow.com/a/638929\">expressive</a> programming languages, like C# (especially since the addition of <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/\">LINQ</a>), Python, Kotlin, etc. that make code comments virtually obsolete. With a highly expressive language, nearly all comments become unnecessary, because it’s easy to write <a href=\"https://en.wikipedia.org/wiki/Self-documenting_code\">self-documenting code</a>; the code is easy enough to understand at a glance that you don’t need comments anymore.</p>\n\n<blockquote>\n<p>“You should always write your code as if comments didn’t exist.” — Jeff Atwood (<a href=\"https://blog.codinghorror.com/coding-without-comments/\">source</a>)</p>\n</blockquote>\n\n<p>I’ll be writing most of my code examples in <a href=\"https://kotlinlang.org/\">Kotlin</a> because it’s one of my favorite languages, and I haven’t gotten to use it recently, but all these examples are applicable to any sufficiently expressive language.</p>\n\n<h1>\n  <a name=\"implementation-comments\" href=\"#implementation-comments\" class=\"anchor\">\n  </a>\n  Implementation Comments\n</h1>\n\n<p>Most of the time, comments in the implementation of a bit of code can be made unnecessary just by naming things better, and keeping your functions and methods small and focused on a single task. Let’s consider a simple example.</p>\n\n<p>We’re working on a web application, and we want to implement a method to validate that a password meets certain required criteria. For this example, let’s say our criteria are:</p>\n\n<ul>\n<li>  Must contain at least one uppercase letter and at least one lowercase letter</li>\n<li>  Must contain one number</li>\n<li>  Must not include whitespace</li>\n<li>  Must contain one of the following special characters: ! # $ % ^ &amp; *</li>\n<li>  Must be between 8 and 20 digits</li>\n</ul>\n\n<p>We <em>could</em> do it in very few lines of code with a complex <a href=\"https://en.wikipedia.org/wiki/Regular_expression\">regular expression</a>:<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight kotlin\"><code><span class=\"cm\">/**\n * Validate that the given password matches our password criteria.\n * @param password the password to check against our criteria\n * @return         true if the password matches all criteria, false otherwise\n */</span>\n<span class=\"k\">fun</span> <span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">):</span> <span class=\"nc\">Boolean</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// Pattern matches that:</span>\n    <span class=\"c1\">// - Must contain at least one uppercase letter and at least one lowercase letter</span>\n    <span class=\"c1\">// - Must contain one number</span>\n    <span class=\"c1\">// - Must not include whitespace</span>\n    <span class=\"c1\">// - Must contain one of the following special characters: ! # $ % ^ &amp; * </span>\n    <span class=\"c1\">// - Must be between 8 and 20 digits</span>\n    <span class=\"kd\">var</span> <span class=\"py\">pattern</span> <span class=\"p\">=</span> <span class=\"s\">\"\"\"^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&amp;*])[\\S]{8,20}$\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">();</span>\n    <span class=\"k\">return</span> <span class=\"n\">password</span><span class=\"p\">.</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fun</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Passw0rd!\"</span><span class=\"p\">));</span> <span class=\"c1\">// true</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"P assw0rd!\"</span><span class=\"p\">))</span> <span class=\"c1\">// false; contains whitespace</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Password!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; no numeric digits</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Passw0rd\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; no special characters</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"password!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; no uppercase letter</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"PASSW0RD!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false, no lowercase letter</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Pswrd!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; too short</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"UltraL0ngSecurePassw0rd!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; too long</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>A great way to make enemies is to make sure nobody else can understand your code.</figcaption></figure>\n\n\n\n\n\n<p>Without those comments inside of the <code>isPasswordValid</code> function, it’s really cryptic and almost impossible to tell what it’s doing without taking a ton of time to figure out that really complicated regular expression.</p>\n\n<p>By splitting each password criterion into a distinct unit of work, the code and the regular expressions used in the code both become <strong>a lot</strong> clearer and easier for a reader to <a href=\"https://en.wikipedia.org/wiki/Grok\">grok</a> with just a glance.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight kotlin\"><code><span class=\"k\">fun</span> <span class=\"nf\">containsUppercaseLetter</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"s\">\"\"\"(?=.*[A-Z]).*\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">());</span>\n<span class=\"k\">fun</span> <span class=\"nf\">containsLowercaseLetter</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"s\">\"\"\"(?=.*[a-z]).*\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">());</span>\n<span class=\"k\">fun</span> <span class=\"nf\">containsNumericDigit</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"s\">\"\"\"(?=.*[0-9]).*\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">());</span>\n<span class=\"k\">fun</span> <span class=\"nf\">doesNotContainWhitespace</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"p\">!</span><span class=\"n\">str</span><span class=\"p\">.</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"s\">\"\"\"(?=.*[\\s]).*\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">());</span>\n<span class=\"k\">fun</span> <span class=\"nf\">containsSpecialCharacter</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"nf\">matches</span><span class=\"p\">(</span><span class=\"s\">\"\"\"(?=.*[!#$%^&amp;*\\.]).*\"\"\"</span><span class=\"p\">.</span><span class=\"nf\">toRegex</span><span class=\"p\">());</span>\n<span class=\"k\">fun</span> <span class=\"nf\">lengthIsInRangeInclusive</span><span class=\"p\">(</span><span class=\"n\">str</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">=</span> <span class=\"n\">str</span><span class=\"p\">.</span><span class=\"n\">length</span> <span class=\"k\">in</span> <span class=\"mi\">8</span><span class=\"o\">..</span><span class=\"mi\">20</span><span class=\"p\">;</span>\n\n<span class=\"cm\">/**\n * Validate that the given password matches our password criteria.\n * @param password the password to check against our criteria\n * @return         true if the password matches all criteria, false otherwise\n */</span>\n<span class=\"k\">fun</span> <span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">):</span> <span class=\"nc\">Boolean</span> <span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"nf\">lengthIsInRangeInclusive</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"p\">&amp;&amp;</span>\n            <span class=\"nf\">containsUppercaseLetter</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"p\">&amp;&amp;</span>\n            <span class=\"nf\">containsLowercaseLetter</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"p\">&amp;&amp;</span>\n            <span class=\"nf\">containsNumericDigit</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"p\">&amp;&amp;</span>\n            <span class=\"nf\">doesNotContainWhitespace</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"p\">&amp;&amp;</span>\n            <span class=\"nf\">containsSpecialCharacter</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fun</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Passw0rd!\"</span><span class=\"p\">));</span> <span class=\"c1\">// true</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"P assw0rd!\"</span><span class=\"p\">))</span> <span class=\"c1\">// false; contains whitespace</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Password!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; no numeric digits</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Passw0rd\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; no special characters</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"password!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; no uppercase letter</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"PASSW0RD!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false, no lowercase letter</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"Pswrd!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; too short</span>\n    <span class=\"nf\">println</span><span class=\"p\">(</span><span class=\"nf\">isPasswordValid</span><span class=\"p\">(</span><span class=\"s\">\"UltraL0ngSecurePassw0rd!\"</span><span class=\"p\">));</span> <span class=\"c1\">// false; too long</span>\n<span class=\"p\">}</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>A few more lines of code can go a long way for clarity.</figcaption></figure>\n\n\n\n\n\n<p>The code is only a few more lines long, but is <strong>so much clearer</strong> at a glance that we don’t even need that huge comment block anymore. We’ve converted a comment telling us what the code is doing into code that tells us itself what it’s doing.</p>\n\n<h1>\n  <a name=\"redundant-comments\" href=\"#redundant-comments\" class=\"anchor\">\n  </a>\n  Redundant Comments\n</h1>\n\n<p>This is the most useless (and annoying) type of code comment. These are the type of comments where you can just remove the comment without even changing the code, and it’s still just as clear what the code is doing.</p>\n\n<p>Let’s say we’re working on a command line tool grab some data from an API and write it to a file. We’ll need to ask the user for a file path to write the data to.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight kotlin\"><code><span class=\"k\">fun</span> <span class=\"nf\">callApi</span><span class=\"p\">():</span> <span class=\"nc\">ApiResult</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// implementation omitted</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fun</span> <span class=\"nf\">writeJsonToFile</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"n\">filePath</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// implementation omitted</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Call the API and get the results</span>\n<span class=\"kd\">var</span> <span class=\"py\">apiResult</span> <span class=\"p\">=</span> <span class=\"nf\">callApi</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// Get the desired file path to save the results to</span>\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Enter file path to save results:\"</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"py\">filePath</span> <span class=\"p\">=</span> <span class=\"nf\">readLine</span><span class=\"p\">()</span><span class=\"o\">!!</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// make sure it's a JSON file</span>\n<span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">filePath</span><span class=\"p\">.</span><span class=\"nf\">endsWith</span><span class=\"p\">(</span><span class=\"s\">\".json\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">filePath</span> <span class=\"p\">=</span> <span class=\"s\">\"${filePath}.json\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// write the data to the json file</span>\n<span class=\"nf\">writeJsonToFile</span><span class=\"p\">(</span><span class=\"n\">apiResult</span><span class=\"p\">.</span><span class=\"nf\">toJson</span><span class=\"p\">(),</span> <span class=\"n\">filePath</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Seems good… or not?</figcaption></figure>\n\n\n\n\n\n<p>There’s a lot cluttering up this code, though. It may seem a bit complicated, but that’s just because of the comments. In situations like this, removing the comments can actually make the code <em>less</em> intimidating to a reader.</p>\n\n<p>When you see a function defined as <code>writeJsonToFile(json: String, filePath: String)</code>, with no comments or explanation, what do you think it does? You can probably immediately understand that “it writes some JSON data to a file”. We can remove every single comment, and the code is still just as clear, readable, and understandable.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight kotlin\"><code><span class=\"k\">fun</span> <span class=\"nf\">callApi</span><span class=\"p\">():</span> <span class=\"nc\">ApiResult</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// implementation omitted</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fun</span> <span class=\"nf\">writeJsonToFile</span><span class=\"p\">(</span><span class=\"n\">json</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">,</span> <span class=\"n\">filePath</span><span class=\"p\">:</span> <span class=\"nc\">String</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// implementation omitted</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span> <span class=\"py\">apiResult</span> <span class=\"p\">=</span> <span class=\"nf\">callApi</span><span class=\"p\">();</span>\n\n<span class=\"nf\">print</span><span class=\"p\">(</span><span class=\"s\">\"Enter file path to save results: \"</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span> <span class=\"py\">filePath</span> <span class=\"p\">=</span> <span class=\"nf\">readLine</span><span class=\"p\">()</span><span class=\"o\">!!</span><span class=\"p\">;</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(!</span><span class=\"n\">filePath</span><span class=\"p\">.</span><span class=\"nf\">endsWith</span><span class=\"p\">(</span><span class=\"s\">\".json\"</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">filePath</span> <span class=\"p\">=</span> <span class=\"s\">\"${filePath}.json\"</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nf\">writeJsonToFile</span><span class=\"p\">(</span><span class=\"n\">apiResult</span><span class=\"p\">.</span><span class=\"nf\">toJson</span><span class=\"p\">(),</span> <span class=\"n\">filePath</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Its still just as easy to understand this code without the comments.</figcaption></figure>\n\n\n\n\n\n<p>We didn’t change any of the code here, we just removed all the comments. Yet, it still seems less intimidating on your first read, right? Appropriately named variables and functions make all the comments completely redundant, so the comments were just clutter.</p>\n\n<h1>\n  <a name=\"exceptions-to-the-rule\" href=\"#exceptions-to-the-rule\" class=\"anchor\">\n  </a>\n  Exceptions to the Rule\n</h1>\n\n<h2>\n  <a name=\"documentation-comments\" href=\"#documentation-comments\" class=\"anchor\">\n  </a>\n  Documentation Comments\n</h2>\n\n<p>The main exception to this is tooling-specific documentation comments, such as <a href=\"https://jsdoc.app/\">JSDoc</a> and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/\">C# XML Documentation Comments</a>. These types of comments provide popup API documentation via IntelliSense (or another autocomplete mechanism) in most IDEs and editors, like <a href=\"https://code.visualstudio.com/\">VS Code</a>, <a href=\"https://www.jetbrains.com/rider/\">Rider</a>, and others.</p>\n\n<p>Documentation comments also usually hook into documentation generator tools, like <a href=\"https://dotnet.github.io/docfx/\">DocFX</a> or <a href=\"https://github.com/EWSoftware/SHFB\">Sandcastle</a>, which can automatically generate HTML documentation web pages from your documentation comments.</p>\n\n<h2>\n  <a name=\"clarification-comments\" href=\"#clarification-comments\" class=\"anchor\">\n  </a>\n  Clarification Comments\n</h2>\n\n<p>Sometimes, there is an obvious solution that seems simpler or better, but there is a specific reason the developer chose not to use that solution. I’ve found this to be <strong>extremely</strong> common in JavaScript. Let’s take a look at an example. We’ll use TypeScript to help make things a bit clearer.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nb\">isFinite</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"kr\">number</span> <span class=\"o\">|</span> <span class=\"nb\">Number</span><span class=\"p\">):</span> <span class=\"nx\">boolean</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// don't use the global window.isFinite(value)</span>\n  <span class=\"c1\">// because it returns true for null/undefined</span>\n  <span class=\"k\">return</span> <span class=\"nb\">Number</span><span class=\"p\">.</span><span class=\"nb\">isFinite</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n<span class=\"p\">};</span>\n\n<span class=\"p\">...</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">NumberUtils</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nb\">isFinite</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Finally, an appropriate place for a comment.</figcaption></figure>\n\n\n\n\n\n<p>In this example, the comment is warranted, because it prevents future developers from introducing bugs without realizing it by changing <code>return Number.isFinite(value);</code> to just <code>return isFinite(value);</code></p>\n\n<p>Another common example is when you need to prevent bugs caused by Internet Explorer having different implementations of built-in functions than every other browser, because reasons. Let’s look at another example in TypeScript.<br>\n</p>\n\n<figure><div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"kd\">const</span> <span class=\"nx\">addEntry</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"kd\">set</span><span class=\"p\">:</span> <span class=\"nb\">Set</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"nx\">value</span><span class=\"p\">:</span> <span class=\"nx\">T</span><span class=\"p\">):</span> <span class=\"nb\">Set</span><span class=\"o\">&lt;</span><span class=\"nx\">T</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// Don't directly return the value of `set.add`</span>\n  <span class=\"c1\">// because it's not chainable in IE 11</span>\n  <span class=\"kd\">set</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">value</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"kd\">set</span><span class=\"p\">;</span>\n<span class=\"p\">};</span>\n\n<span class=\"p\">...</span>\n\n<span class=\"k\">export</span> <span class=\"kd\">const</span> <span class=\"nx\">SetUtils</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"nx\">addEntry</span><span class=\"p\">,</span>\n  <span class=\"p\">...</span>\n<span class=\"p\">};</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n<figcaption>Internet Explorer sucks.</figcaption></figure>\n\n\n\n\n\n<p>Once again, in this example, the comment prevents a future developer from unknowingly introducing Internet Explorer-specific bugs by changing this implementation to just <code>return set.add(value);</code></p>\n\n\n<hr>\n\n<p>Modern programming languages have become so expressive that code comments are virtually obsolete, except in specific circumstances. The time has come to replace code comments with highly expressive, self-documenting code.</p>\n\n","body_markdown":"Code comments are lame.\n\nCode comments once served a critical purpose; adding context or explanation to a snippet of code. But this was back when programming languages were mostly esoteric, and the barrier to entry for writing code was extremely high.\n\nToday, though, we have extremely [expressive](https://stackoverflow.com/a/638929) programming languages, like C# (especially since the addition of [LINQ](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/linq/)), Python, Kotlin, etc. that make code comments virtually obsolete. With a highly expressive language, nearly all comments become unnecessary, because it’s easy to write [self-documenting code](https://en.wikipedia.org/wiki/Self-documenting_code); the code is easy enough to understand at a glance that you don’t need comments anymore.\n\n> “You should always write your code as if comments didn’t exist.” — Jeff Atwood ([source](https://blog.codinghorror.com/coding-without-comments/))\n\nI’ll be writing most of my code examples in [Kotlin](https://kotlinlang.org/) because it’s one of my favorite languages, and I haven’t gotten to use it recently, but all these examples are applicable to any sufficiently expressive language.\n\n# Implementation Comments\n\nMost of the time, comments in the implementation of a bit of code can be made unnecessary just by naming things better, and keeping your functions and methods small and focused on a single task. Let’s consider a simple example.\n\nWe’re working on a web application, and we want to implement a method to validate that a password meets certain required criteria. For this example, let’s say our criteria are:\n\n*   Must contain at least one uppercase letter and at least one lowercase letter\n*   Must contain one number\n*   Must not include whitespace\n*   Must contain one of the following special characters: ! # $ % ^ & \\*\n*   Must be between 8 and 20 digits\n\nWe _could_ do it in very few lines of code with a complex [regular expression](https://en.wikipedia.org/wiki/Regular_expression):\n\n```kotlin\n/**\n * Validate that the given password matches our password criteria.\n * @param password the password to check against our criteria\n * @return         true if the password matches all criteria, false otherwise\n */\nfun isPasswordValid(password: String): Boolean {\n    // Pattern matches that:\n    // - Must contain at least one uppercase letter and at least one lowercase letter\n    // - Must contain one number\n    // - Must not include whitespace\n    // - Must contain one of the following special characters: ! # $ % ^ & * \n    // - Must be between 8 and 20 digits\n    var pattern = \"\"\"^(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[!#$%^&*])[\\S]{8,20}$\"\"\".toRegex();\n    return password.matches(pattern);\n}\n\nfun main() {\n    println(isPasswordValid(\"Passw0rd!\")); // true\n    println(isPasswordValid(\"P assw0rd!\")) // false; contains whitespace\n    println(isPasswordValid(\"Password!\")); // false; no numeric digits\n    println(isPasswordValid(\"Passw0rd\")); // false; no special characters\n    println(isPasswordValid(\"password!\")); // false; no uppercase letter\n    println(isPasswordValid(\"PASSW0RD!\")); // false, no lowercase letter\n    println(isPasswordValid(\"Pswrd!\")); // false; too short\n    println(isPasswordValid(\"UltraL0ngSecurePassw0rd!\")); // false; too long\n}\n```\n<figcaption>A great way to make enemies is to make sure nobody else can understand your code.</figcaption>\n\nWithout those comments inside of the `isPasswordValid` function, it’s really cryptic and almost impossible to tell what it’s doing without taking a ton of time to figure out that really complicated regular expression.\n\nBy splitting each password criterion into a distinct unit of work, the code and the regular expressions used in the code both become **a lot** clearer and easier for a reader to [grok](https://en.wikipedia.org/wiki/Grok) with just a glance.\n\n```kotlin\nfun containsUppercaseLetter(str: String) = str.matches(\"\"\"(?=.*[A-Z]).*\"\"\".toRegex());\nfun containsLowercaseLetter(str: String) = str.matches(\"\"\"(?=.*[a-z]).*\"\"\".toRegex());\nfun containsNumericDigit(str: String) = str.matches(\"\"\"(?=.*[0-9]).*\"\"\".toRegex());\nfun doesNotContainWhitespace(str: String) = !str.matches(\"\"\"(?=.*[\\s]).*\"\"\".toRegex());\nfun containsSpecialCharacter(str: String) = str.matches(\"\"\"(?=.*[!#$%^&*\\.]).*\"\"\".toRegex());\nfun lengthIsInRangeInclusive(str: String) = str.length in 8..20;\n\n/**\n * Validate that the given password matches our password criteria.\n * @param password the password to check against our criteria\n * @return         true if the password matches all criteria, false otherwise\n */\nfun isPasswordValid(password: String): Boolean {\n    return lengthIsInRangeInclusive(password) &&\n    \t\tcontainsUppercaseLetter(password) &&\n    \t\tcontainsLowercaseLetter(password) &&\n    \t\tcontainsNumericDigit(password) &&\n    \t\tdoesNotContainWhitespace(password) &&\n    \t\tcontainsSpecialCharacter(password);\n}\n\nfun main() {\n    println(isPasswordValid(\"Passw0rd!\")); // true\n    println(isPasswordValid(\"P assw0rd!\")) // false; contains whitespace\n    println(isPasswordValid(\"Password!\")); // false; no numeric digits\n    println(isPasswordValid(\"Passw0rd\")); // false; no special characters\n    println(isPasswordValid(\"password!\")); // false; no uppercase letter\n    println(isPasswordValid(\"PASSW0RD!\")); // false, no lowercase letter\n    println(isPasswordValid(\"Pswrd!\")); // false; too short\n    println(isPasswordValid(\"UltraL0ngSecurePassw0rd!\")); // false; too long\n}\n```\n<figcaption>A few more lines of code can go a long way for clarity.</figcaption>\n\nThe code is only a few more lines long, but is **so much clearer** at a glance that we don’t even need that huge comment block anymore. We’ve converted a comment telling us what the code is doing into code that tells us itself what it’s doing.\n\n# Redundant Comments\n\nThis is the most useless (and annoying) type of code comment. These are the type of comments where you can just remove the comment without even changing the code, and it’s still just as clear what the code is doing.\n\nLet’s say we’re working on a command line tool grab some data from an API and write it to a file. We’ll need to ask the user for a file path to write the data to.\n\n```kotlin\nfun callApi(): ApiResult {\n    // implementation omitted\n}\n\nfun writeJsonToFile(json: String, filePath: String) {\n    // implementation omitted\n}\n\n// Call the API and get the results\nvar apiResult = callApi();\n\n// Get the desired file path to save the results to\nprint(\"Enter file path to save results:\");\nvar filePath = readLine()!!;\n\n// make sure it's a JSON file\nif (!filePath.endsWith(\".json\")) {\n    filePath = \"${filePath}.json\";\n}\n\n// write the data to the json file\nwriteJsonToFile(apiResult.toJson(), filePath);\n```\n<figcaption>Seems good… or not?</figcaption>\n\nThere’s a lot cluttering up this code, though. It may seem a bit complicated, but that’s just because of the comments. In situations like this, removing the comments can actually make the code _less_ intimidating to a reader.\n\nWhen you see a function defined as `writeJsonToFile(json: String, filePath: String)`, with no comments or explanation, what do you think it does? You can probably immediately understand that “it writes some JSON data to a file”. We can remove every single comment, and the code is still just as clear, readable, and understandable.\n\n```kotlin\nfun callApi(): ApiResult {\n    // implementation omitted\n}\n\nfun writeJsonToFile(json: String, filePath: String) {\n    // implementation omitted\n}\n\nvar apiResult = callApi();\n\nprint(\"Enter file path to save results: \");\nvar filePath = readLine()!!;\n\nif (!filePath.endsWith(\".json\")) {\n    filePath = \"${filePath}.json\";\n}\n\nwriteJsonToFile(apiResult.toJson(), filePath);\n```\n<figcaption>Its still just as easy to understand this code without the comments.</figcaption>\n\nWe didn’t change any of the code here, we just removed all the comments. Yet, it still seems less intimidating on your first read, right? Appropriately named variables and functions make all the comments completely redundant, so the comments were just clutter.\n\n# Exceptions to the Rule\n\n## Documentation Comments\n\nThe main exception to this is tooling-specific documentation comments, such as [JSDoc](https://jsdoc.app/) and [C# XML Documentation Comments](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/xmldoc/). These types of comments provide popup API documentation via IntelliSense (or another autocomplete mechanism) in most IDEs and editors, like [VS Code](https://code.visualstudio.com/), [Rider](https://www.jetbrains.com/rider/), and others.\n\nDocumentation comments also usually hook into documentation generator tools, like [DocFX](https://dotnet.github.io/docfx/) or [Sandcastle](https://github.com/EWSoftware/SHFB), which can automatically generate HTML documentation web pages from your documentation comments.\n\n## Clarification Comments\n\nSometimes, there is an obvious solution that seems simpler or better, but there is a specific reason the developer chose not to use that solution. I’ve found this to be **extremely** common in JavaScript. Let’s take a look at an example. We’ll use TypeScript to help make things a bit clearer.\n\n```ts\nconst isFinite = (value: number | Number): boolean => {\n  // don't use the global window.isFinite(value)\n  // because it returns true for null/undefined\n  return Number.isFinite(value);\n};\n\n...\n\nexport const NumberUtils = {\n  isFinite,\n  ...\n};\n```\n<figcaption>Finally, an appropriate place for a comment.</figcaption>\n\nIn this example, the comment is warranted, because it prevents future developers from introducing bugs without realizing it by changing `return Number.isFinite(value);` to just `return isFinite(value);`\n\nAnother common example is when you need to prevent bugs caused by Internet Explorer having different implementations of built-in functions than every other browser, because reasons. Let’s look at another example in TypeScript.\n\n```ts\nconst addEntry<T>(set: Set<T>, value: T): Set<T> {\n  // Don't directly return the value of `set.add`\n  // because it's not chainable in IE 11\n  set.add(value);\n  return set;\n};\n\n...\n\nexport const SetUtils = {\n  addEntry,\n  ...\n};\n```\n<figcaption>Internet Explorer sucks.</figcaption>\n\nOnce again, in this example, the comment prevents a future developer from unknowingly introducing Internet Explorer-specific bugs by changing this implementation to just `return set.add(value);`\n\n<hr/>\n\nModern programming languages have become so expressive that code comments are virtually obsolete, except in specific circumstances. The time has come to replace code comments with highly expressive, self-documenting code.","user":{"name":"Mat Jones","username":"matjones","twitter_username":null,"github_username":"mrjones2014","website_url":"https://mjones.network","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rzQaKEWl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--lIbHS3Lt--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png"}}},"__N_SSG":true}