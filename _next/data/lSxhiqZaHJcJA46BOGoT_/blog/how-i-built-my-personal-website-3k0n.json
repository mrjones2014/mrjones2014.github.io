{"pageProps":{"article":{"type_of":"article","id":579786,"title":"How I Built My Personal Website","description":"I had a lot of fun building my personal site, because I used it as an opportunity to learn some new t...","readable_publish_date":"Jan 22","slug":"how-i-built-my-personal-website-3k0n","path":"/matjones/how-i-built-my-personal-website-3k0n","url":"https://dev.to/matjones/how-i-built-my-personal-website-3k0n","comments_count":1,"public_reactions_count":3,"collection_id":null,"published_timestamp":"2021-01-22T23:05:15Z","positive_reactions_count":3,"cover_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--PuyeLOBJ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/20zd2tscvawgejaqyocc.jpg","social_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--I42nx1fo--/c_imagga_scale,f_auto,fl_progressive,h_500,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/20zd2tscvawgejaqyocc.jpg","canonical_url":"https://dev.to/matjones/how-i-built-my-personal-website-3k0n","created_at":"2021-01-22T23:05:15Z","edited_at":null,"crossposted_at":null,"published_at":"2021-01-22T23:05:15Z","last_comment_at":"2021-01-23T10:01:51Z","tag_list":"showdev, react, nextjs, portfolio","tags":["showdev","react","nextjs","portfolio"],"body_html":"<p>I had a lot of fun building my personal site, because I used it as an opportunity to learn some new tech. Let's take a tour of what's in it.</p>\n\n<h1>\n  <a name=\"core\" href=\"#core\" class=\"anchor\">\n  </a>\n  Core\n</h1>\n\n<p>At it's core, the site is powered by <a href=\"https://nextjs.org/\">Next.js</a> and <a href=\"https://reactjs.org/\">React</a>. I used Next.js because the content is mostly static, which is a use-case Next excels at. Next enables Server Side Rendering (SSR) by default, but also supports Server Side Generation (SSG), which generates static HTML pages at build time. You can read more about the differences between SSR and SSG in <a href=\"https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation\">this great article by the Vercel team</a>.</p>\n\n\n<div class=\"ltag-github-readme-tag\">\n  <div class=\"readme-overview\">\n    <h2>\n      <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--vJ70wriM--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://practicaldev-herokuapp-com.freetls.fastly.net/assets/github-logo-ba8488d21cd8ee1fee097b8410db9deaa41d0ca30b004c0c63de0a479114156f.svg\" alt=\"GitHub logo\" loading=\"lazy\">\n      <a href=\"https://github.com/vercel\">\n        vercel\n      </a> / <a style=\"font-weight: 600;\" href=\"https://github.com/vercel/next.js\">\n        next.js\n      </a>\n    </h2>\n    <h3>\n      The React Framework\n    </h3>\n  </div>\n</div>\n\n\n<h2>\n  <a name=\"code-style\" href=\"#code-style\" class=\"anchor\">\n  </a>\n  Code Style\n</h2>\n\n<p>In the project, I used React functional components with hooks <em>almost</em> exclusively because I find I can write much cleaner and more concise components using the hooks API vs. traditional class-based components; the only exceptions being <a href=\"https://nextjs.org/docs/advanced-features/custom-app\"><code>_app.tsx</code></a> and <a href=\"https://nextjs.org/docs/advanced-features/custom-document\"><code>_document.tsx</code></a>, which extend base classes from the Next framework. A <code>_document.tsx</code> file allows you to customize the base HTML template that the React app is injected into, while <code>_app.tsx</code> allows you to use shared layouts, add an <a href=\"https://reactjs.org/docs/error-boundaries.html\">Error Boundary</a>, import global stylesheets, and more.</p>\n\n<h2>\n  <a name=\"build-customization\" href=\"#build-customization\" class=\"anchor\">\n  </a>\n  Build Customization\n</h2>\n\n<h3>\n  <a name=\"markdown-copy-content\" href=\"#markdown-copy-content\" class=\"anchor\">\n  </a>\n  Markdown Copy Content\n</h3>\n\n<p>I've also added <a href=\"https://www.npmjs.com/package/@mdx-js/loader\"><code>@mdx-js/loader</code></a> and <a href=\"https://www.npmjs.com/package/@next/mdx\"><code>@next/mdx</code></a> to my build configuration, which allows me to import markdown (*.md) files as React components. Using this technique allows me to keep some of my copy text (such as the \"about\" page) in markdown rather than having to manually write out the JSX for it, which is just simpler and easier to maintain.</p>\n\n<h3>\n  <a name=\"working-with-svgs\" href=\"#working-with-svgs\" class=\"anchor\">\n  </a>\n  Working with SVGs\n</h3>\n\n<p>I'm using <a href=\"https://github.com/gregberge/svgr\">SVGR</a> to transform my SVG files into React components, rather than loading them via <code>&lt;img src=\"/my-image.svg\"/&gt;</code>. This means my SVGs will be loaded with the markup, rather than being loaded asynchronously, which can help eliminate <a href=\"https://web.dev/cls/\">Cumulative Layout Shift (CLS)</a> issues. It's as simple as customizing your <code>next.config.js</code> file to use the <code>@svgr/webpack</code> loader for <code>*.svg</code> file types, then importing them in your components, a la:<br>\n</p>\n\n<div class=\"highlight js-code-highlight\">\n<pre class=\"highlight typescript\"><code><span class=\"k\">import</span> <span class=\"nx\">SvgAvatar</span> <span class=\"k\">from</span> <span class=\"dl\">\"</span><span class=\"s2\">/avatar.svg</span><span class=\"dl\">\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">const</span> <span class=\"nx\">MyComponent</span><span class=\"p\">:</span> <span class=\"nx\">React</span><span class=\"p\">.</span><span class=\"nx\">FC</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">(</span>\n  <span class=\"o\">&lt;</span><span class=\"nx\">MyComponent</span><span class=\"o\">&gt;</span>\n    <span class=\"o\">&lt;</span><span class=\"nx\">SvgAvatar</span><span class=\"o\">/&gt;</span>\n  <span class=\"o\">&lt;</span><span class=\"sr\">/MyComponent</span><span class=\"err\">&gt;\n</span><span class=\"p\">);</span>\n</code></pre>\n<div class=\"highlight__panel js-actions-panel\">\n<div class=\"highlight__panel-action js-fullscreen-code-action\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-on\"><title>Enter fullscreen mode</title>\n    <path d=\"M16 3h6v6h-2V5h-4V3zM2 3h6v2H4v4H2V3zm18 16v-4h2v6h-6v-2h4zM4 19h4v2H2v-6h2v4z\"></path>\n</svg>\n\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20px\" height=\"20px\" viewbox=\"0 0 24 24\" class=\"highlight-action crayons-icon highlight-action--fullscreen-off\"><title>Exit fullscreen mode</title>\n    <path d=\"M18 7h4v2h-6V3h2v4zM8 9H2V7h4V3h2v6zm10 8v4h-2v-6h6v2h-4zM8 15v6H6v-4H2v-2h6z\"></path>\n</svg>\n\n</div>\n</div>\n</div>\n\n<h3>\n  <a name=\"dev-blog\" href=\"#dev-blog\" class=\"anchor\">\n  </a>\n  DEV Blog\n</h3>\n\n<p>I previously wrote another article about how we can use the DEV API to load your articles in order to embed them in your own website.</p>\n\n\n<div class=\"ltag__link\">\n  <a href=\"/matjones\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__pic\">\n      <img src=\"https://res.cloudinary.com/practicaldev/image/fetch/s--0A3GZ9Rx--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://res.cloudinary.com/practicaldev/image/fetch/s--H6NIdTid--/c_fill%2Cf_auto%2Cfl_progressive%2Ch_150%2Cq_auto%2Cw_150/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png\" alt=\"matjones image\" loading=\"lazy\">\n    </div>\n  </a>\n  <a href=\"/matjones/how-to-embed-your-dev-to-blog-in-your-personal-website-4l81\" class=\"ltag__link__link\">\n    <div class=\"ltag__link__content\">\n      <h2>How to Embed Your Dev.to Blog in Your Personal Website</h2>\n      <h3>Mat Jones ・ Jan 18 ・ 5 min read</h3>\n      <div class=\"ltag__link__taglist\">\n        <span class=\"ltag__link__tag\">#blog</span>\n        <span class=\"ltag__link__tag\">#typescript</span>\n        <span class=\"ltag__link__tag\">#javascript</span>\n        <span class=\"ltag__link__tag\">#portfolio</span>\n      </div>\n    </div>\n  </a>\n</div>\n\n\n\n<p>I combined this technique with Next's <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\"><code>getStaticProps</code></a> method to load all my DEV articles at build time, and statically generate the blog pages for my site. To keep the pages up-to-date, I configured the <a href=\"https://github.com/features/actions\">GitHub Action</a> that builds and deploys my site to run periodically. I <a href=\"https://github.com/mrjones2014/mrjones2014.github.io/blob/master/.github/workflows/integrate.yml\">configured it to run every 30 minutes</a>, however in practice it seems like for some reason it actually runs closer to once every hour. If your CI/CD pipeline is actually time-sensitive, I recommend not using GitHub Actions.</p>\n\n<h2>\n  <a name=\"design\" href=\"#design\" class=\"anchor\">\n  </a>\n  Design\n</h2>\n\n<h2>\n  <a name=\"ui-framework\" href=\"#ui-framework\" class=\"anchor\">\n  </a>\n  UI Framework\n</h2>\n\n<p>On a recommendation from a friend, I decided to learn <a href=\"https://blueprintjs.com/\">Blueprint.js</a> and use it to build my website. After building lots of components using it, tweaking it, and styling it, I think it has become my new favorite React UI framework.</p>\n\n<p>Right out of the box, everything looks amazing, cohesive, and enterprise-quality. Their component library is pretty extensive, and includes just about everything you'd want in your base toolkit, from simple stuff like <a href=\"https://blueprintjs.com/docs/#core/components/navbar\">navbars</a> and <a href=\"https://blueprintjs.com/docs/#core/components/button\">buttons</a>, to layout things like <a href=\"https://blueprintjs.com/docs/#core/components/card\">cards</a>, to more complex components like <a href=\"https://blueprintjs.com/docs/#core/components/menu\">interactive menus</a>, <a href=\"https://blueprintjs.com/docs/#core/components/progress-bar\">progress bars</a> and <a href=\"https://blueprintjs.com/docs/#core/components/drawer\">drawers</a>. It's pretty easy to customize and compose the built-in components to make more complex designs. My only complaint is that there are a select few places I had to use the <a href=\"https://uxengineer.com/css-specificity-avoid-important-css/#why-avoid-!important\">dreaded <code>!important</code> CSS directive</a> to override some specific styles from Blueprint's stylesheets.</p>\n\n<h2>\n  <a name=\"stylesheets\" href=\"#stylesheets\" class=\"anchor\">\n  </a>\n  Stylesheets\n</h2>\n\n<p>My go-to language for stylesheets has been <a href=\"https://sass-lang.com/\">SCSS</a> for a long time, because, well, let's face it, <a href=\"https://hackernoon.com/why-you-shouldnt-write-vanilla-v92333xn\">writing vanilla CSS just sucks</a>.</p>\n\n<p>One of the greatest features of CSS preprocessors like Sass is the <a href=\"https://sass-lang.com/documentation/style-rules#nesting\">ability to write nested styles</a>; if your markup can be nested, then why can't your stylesheets?!</p>\n\n<p>You can also easily re-use bits of common styles via <a href=\"https://sass-lang.com/documentation/at-rules/mixin\">mixins</a>, and even run compile-time <a href=\"https://sass-lang.com/documentation/operators\">logical operations</a> to further customize the generated stylesheets. It's incredibly powerful and extensible.</p>\n\n<h2>\n  <a name=\"deployment\" href=\"#deployment\" class=\"anchor\">\n  </a>\n  Deployment\n</h2>\n\n<p>My site is hosted statically on <a href=\"https://pages.github.com/\">GitHub Pages</a>, configured to deploy from the <code>gh-pages</code> branch of the repository. Deployment happens automatically on push, periodically, and can be manually triggered via a <a href=\"https://github.com/mrjones2014/mrjones2014.github.io/blob/master/.github/workflows/integrate.yml\">GitHub Actions workflow</a>. The date of the most recent build is injected into the app at compile time via an environment variable in <code>next.config.js</code>.</p>\n\n","body_markdown":"I had a lot of fun building my personal site, because I used it as an opportunity to learn some new tech. Let's take a tour of what's in it.\n\n# Core\n\nAt it's core, the site is powered by [Next.js](https://nextjs.org/) and [React](https://reactjs.org/). I used Next.js because the content is mostly static, which is a use-case Next excels at. Next enables Server Side Rendering (SSR) by default, but also supports Server Side Generation (SSG), which generates static HTML pages at build time. You can read more about the differences between SSR and SSG in [this great article by the Vercel team](https://vercel.com/blog/nextjs-server-side-rendering-vs-static-generation).\n\n{% github vercel/next.js no-readme %}\n\n## Code Style\n\nIn the project, I used React functional components with hooks *almost* exclusively because I find I can write much cleaner and more concise components using the hooks API vs. traditional class-based components; the only exceptions being [`_app.tsx`](https://nextjs.org/docs/advanced-features/custom-app) and [`_document.tsx`](https://nextjs.org/docs/advanced-features/custom-document), which extend base classes from the Next framework. A `_document.tsx` file allows you to customize the base HTML template that the React app is injected into, while `_app.tsx` allows you to use shared layouts, add an [Error Boundary](https://reactjs.org/docs/error-boundaries.html), import global stylesheets, and more.\n\n## Build Customization\n\n### Markdown Copy Content\n\nI've also added [`@mdx-js/loader`](https://www.npmjs.com/package/@mdx-js/loader) and [`@next/mdx`](https://www.npmjs.com/package/@next/mdx) to my build configuration, which allows me to import markdown (*.md) files as React components. Using this technique allows me to keep some of my copy text (such as the \"about\" page) in markdown rather than having to manually write out the JSX for it, which is just simpler and easier to maintain.\n\n### Working with SVGs\n\nI'm using [SVGR](https://github.com/gregberge/svgr) to transform my SVG files into React components, rather than loading them via `<img src=\"/my-image.svg\"/>`. This means my SVGs will be loaded with the markup, rather than being loaded asynchronously, which can help eliminate [Cumulative Layout Shift (CLS)](https://web.dev/cls/) issues. It's as simple as customizing your `next.config.js` file to use the `@svgr/webpack` loader for `*.svg` file types, then importing them in your components, a la:\n\n```typescript\nimport SvgAvatar from \"/avatar.svg\";\n\nconst MyComponent: React.FC = () => (\n  <MyComponent>\n    <SvgAvatar/>\n  </MyComponent>\n);\n```\n\n### DEV Blog\n\nI previously wrote another article about how we can use the DEV API to load your articles in order to embed them in your own website.\n\n{% link matjones/how-to-embed-your-dev-to-blog-in-your-personal-website-4l81 %}\n\nI combined this technique with Next's [`getStaticProps`](https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation) method to load all my DEV articles at build time, and statically generate the blog pages for my site. To keep the pages up-to-date, I configured the [GitHub Action](https://github.com/features/actions) that builds and deploys my site to run periodically. I [configured it to run every 30 minutes](https://github.com/mrjones2014/mrjones2014.github.io/blob/master/.github/workflows/integrate.yml), however in practice it seems like for some reason it actually runs closer to once every hour. If your CI/CD pipeline is actually time-sensitive, I recommend not using GitHub Actions.\n\n## Design\n\n## UI Framework\n\nOn a recommendation from a friend, I decided to learn [Blueprint.js](https://blueprintjs.com/) and use it to build my website. After building lots of components using it, tweaking it, and styling it, I think it has become my new favorite React UI framework.\n\nRight out of the box, everything looks amazing, cohesive, and enterprise-quality. Their component library is pretty extensive, and includes just about everything you'd want in your base toolkit, from simple stuff like [navbars](https://blueprintjs.com/docs/#core/components/navbar) and [buttons](https://blueprintjs.com/docs/#core/components/button), to layout things like [cards](https://blueprintjs.com/docs/#core/components/card), to more complex components like [interactive menus](https://blueprintjs.com/docs/#core/components/menu), [progress bars](https://blueprintjs.com/docs/#core/components/progress-bar) and [drawers](https://blueprintjs.com/docs/#core/components/drawer). It's pretty easy to customize and compose the built-in components to make more complex designs. My only complaint is that there are a select few places I had to use the [dreaded `!important` CSS directive](https://uxengineer.com/css-specificity-avoid-important-css/#why-avoid-!important) to override some specific styles from Blueprint's stylesheets.\n\n## Stylesheets\n\nMy go-to language for stylesheets has been [SCSS](https://sass-lang.com/) for a long time, because, well, let's face it, [writing vanilla CSS just sucks](https://hackernoon.com/why-you-shouldnt-write-vanilla-v92333xn).\n\nOne of the greatest features of CSS preprocessors like Sass is the [ability to write nested styles](https://sass-lang.com/documentation/style-rules#nesting); if your markup can be nested, then why can't your stylesheets?!\n\nYou can also easily re-use bits of common styles via [mixins](https://sass-lang.com/documentation/at-rules/mixin), and even run compile-time [logical operations](https://sass-lang.com/documentation/operators) to further customize the generated stylesheets. It's incredibly powerful and extensible.\n\n## Deployment\n\nMy site is hosted statically on [GitHub Pages](https://pages.github.com/), configured to deploy from the `gh-pages` branch of the repository. Deployment happens automatically on push, periodically, and can be manually triggered via a [GitHub Actions workflow](https://github.com/mrjones2014/mrjones2014.github.io/blob/master/.github/workflows/integrate.yml). The date of the most recent build is injected into the app at compile time via an environment variable in `next.config.js`.","user":{"name":"Mat Jones","username":"matjones","twitter_username":null,"github_username":"mrjones2014","website_url":"https://mjones.network","profile_image":"https://res.cloudinary.com/practicaldev/image/fetch/s--rzQaKEWl--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png","profile_image_90":"https://res.cloudinary.com/practicaldev/image/fetch/s--lIbHS3Lt--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/561062/dde6a19b-1df3-4ed3-b723-86424694d93f.png"},"flare_tag":{"name":"showdev","bg_color_hex":"#091b47","text_color_hex":"#b2ffe1"}}},"__N_SSG":true}